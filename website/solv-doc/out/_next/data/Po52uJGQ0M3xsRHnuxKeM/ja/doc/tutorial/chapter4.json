{"pageProps":{"article":{"title":"第4章: 📊🔥 Firestore と Google スプレッドシートを活用した収益管理 - 効率的なデータ追跡と分析の実践ガイド 📈","description":"この章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。","content":"\nこの章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。データ収集から分析、報告までの全プロセスをカバーし、リアルタイムでのパフォーマンス追跡と意思決定の迅速化を目指します。Firestore の強力なデータベース機能と Google スプレッドシートのアクセシビリティを組み合わせることで、収益管理の自動化と最適化を実現します。本章を通じて、技術的な知識だけでなく、効果的なデータ活用方法を身につけることができます。\n\n## 📝 Firestore のモデルを作成する\n\n前回の章の状態だと、スケジューラーがチェックをするたびに重複するデータを通知してしまいます。\n`Firestore` にデータを記録し、新しいデータが追加された時のみに通知するように改善していきます。\n\n`Wallet` と `WalletStakeReward` という二つのモデルを以下に作成します。\n\n`functions/skeet/src/models/walletModels.ts`\n\n```ts\nimport { Timestamp, FieldValue } from '@skeet-framework/firestore'\n\n// CollectionId: WalletPubkey\n// DocumentId: walletPubkey - e.g. LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9\n// Path: WalletPubkey\nexport const WalletPubkeyCN = 'WalletPubkey'\nexport const genWalletPubkeyPath = () => `${WalletPubkeyCN}`\nexport type WalletPubkey = {\n  id?: string\n  date: string\n  walletPubkey: string\n  totalSol: number\n  totalRewardAmount: number\n  createdAt?: Timestamp | FieldValue\n  updatedAt?: Timestamp | FieldValue\n}\n\n// CollectionId: StakeReward\n// DocumentId: epoch - e.g. 420\n// Path: StakeReward\nexport const StakeRewardCN = 'StakeReward'\nexport const genStakeRewardPath = (pubkey: string) =>\n  `${WalletPubkeyCN}/${pubkey}/${StakeRewardCN}`\nexport type StakeReward = {\n  id?: string\n  date: string\n  walletPubkey: string\n  epoch: number\n  totalRewardAmount: number\n  totalBalance: number\n  createdAt?: Timestamp | FieldValue\n  updatedAt?: Timestamp | FieldValue\n}\n```\n\n## 📌 管理するアドレスを登録する\n\nTDS のリワードは毎月、`authority` アカウントに対してステイキングアカウントが発行されますが、ここでは `@skeet-framework/solana-utils` を使い、 `authority` アカウントのアドレスを登録すると、それに紐づくステイクアカウントの報酬をまとめて確認することができるように設定します。\n\n以下のディレクトリに管理するウォレットの pubkey を Firestore に登録するスクリプトを作成します。\nFirebase のブラウザから直接データを入力することもできるので、任意の方法でデータを追加して下さい。\n\n`functions/skeet/src/script/addWallet.ts`\n\n```ts\nimport { Wallet, WalletCN } from '@/models/walletModels'\nimport { add } from '@skeet-framework/firestore'\nimport { format } from '@skeet-framework/utils'\nimport admin from 'firebase-admin'\nadmin.initializeApp()\nconst db = admin.firestore()\n\nexport const addWallet = async (pubkey: string) => {\n  const walletParams: Wallet = {\n    date: format(new Date(), 'yyyy-MM-dd'),\n    pubkey,\n    totalSol: 0,\n    totalRewardAmount: 0,\n  }\n  await add<Wallet>(db, WalletCN, walletParams, pubkey)\n  console.log({ status: 'success' })\n}\n\nconst run = async () => {\n  const pubkey = 'your-authority-keypair'\n  await addWallet(pubkey)\n}\n\nrun()\n```\n\n`functions/skeet` ディレクトリに移動して、スクリプトを実行します。\n\n```bash\ncd functions/skeet && npx ts-node -r tsconfig-paths/register --transpile-only src/scripts/addWallet.ts\n{ status: 'success' }\n```\n\nFirebase の Firestore を確認してみると、無事にデータが作成されました 🎉\n\n![](https://storage.googleapis.com/zenn-user-upload/bd7e20abeb4b-20231123.png)\n\n## 🔄 StakeMonitor を更新する\n\nそれでは `StakeMonitor` を以下のように更新します。\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { schedulePublicOption } from '@/routings/options'\nimport {\n  RewardDataResponse,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} from '@skeet-framework/solana-utils'\nimport { defineSecret } from 'firebase-functions/params'\nimport { format, sendDiscord } from '@skeet-framework/utils'\nimport { add, get, query, update } from '@skeet-framework/firestore'\nimport {\n  Wallet,\n  WalletCN,\n  WalletStakeReward,\n  genWalletStakeRewardPath,\n} from '@/models/walletModels'\nimport { db } from '@/index'\n\n// Define secrets\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\nconst HELIUS_ENDPOINT = defineSecret('HELIUS_ENDPOINT')\n\nexport const stakeMonitor = onSchedule(\n  { ...schedulePublicOption, secrets: [DISCORD_WEBHOOK_URL, HELIUS_ENDPOINT] },\n  async (event) => {\n    try {\n      // Get all wallets\n      const wallets = await query<Wallet>(db, WalletCN, [\n        { field: 'pubkey', operator: '!=', value: '' },\n      ])\n\n      // If no wallet found, return\n      if (wallets.length === 0) {\n        console.log({ status: 'error', message: 'No wallet found' })\n        return\n      }\n\n      // Check if already checked\n      const lastEpoch = await getCurrentEpoch(HELIUS_ENDPOINT.value())\n      const lastReward = await get<WalletStakeReward>(\n        db,\n        genWalletStakeRewardPath(wallets[0].pubkey),\n        String(lastEpoch - 1)\n      )\n\n      // If already checked, return\n      if (lastReward) {\n        console.log({ status: 'ok', message: 'Already checked' })\n        return\n      }\n\n      // Get wallet\n      const wallet = await get<Wallet>(db, WalletCN, wallets[0].pubkey)\n      if (!wallet) {\n        console.log({ status: 'error', message: 'Wallet not found' })\n        return\n      }\n\n      // Get all stake rewards\n      for await (const wallet of wallets) {\n        const walletPubkey = wallet.pubkey\n        const result: RewardDataResponse = await getAllStakeRewardsByPubkey(\n          HELIUS_ENDPOINT.value(),\n          walletPubkey\n        )\n        const walletStakeRewardParams: WalletStakeReward = {\n          date: format(new Date(), 'yyyy-MM-dd'),\n          epoch: result.epoch,\n          totalRewardAmount: result.totalRewardAmount,\n          totalBalance: result.totalBalance,\n        }\n\n        // Add walletStakeReward\n        await add<WalletStakeReward>(\n          db,\n          genWalletStakeRewardPath(walletPubkey),\n          walletStakeRewardParams,\n          String(result.epoch)\n        )\n\n        // Update wallet totalSol and totalRewardAmount\n        await update<Wallet>(db, WalletCN, walletPubkey, {\n          totalSol: wallet.totalSol + result.totalBalance,\n          totalRewardAmount:\n            wallet.totalRewardAmount + result.totalRewardAmount,\n        })\n\n        // Generate content\n        const content = `Account: ${walletPubkey}\nEpoch: ${result.epoch}\nReward: ${result.totalRewardAmount} SOL\nTotal SOL: ${result.totalBalance} SOL\n`\n\n        // Send discord message\n        await sendDiscord(content, {\n          webhookUrl: DISCORD_WEBHOOK_URL.value(),\n          username: 'Skeet Staking Monitor',\n        })\n      }\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## 🚀 デプロイしてアプリを更新する\n\nデプロイを行い変更を反映させます。\n\n```bash\nskeet deploy --function skeet:stakeMonitor\n```\n\n## ⏲️ Scheduler を実行する\n\n同様に Scheduler から実行してみると\n\n![](https://storage.googleapis.com/zenn-user-upload/8588406d71be-20231123.png)\n\n![](https://storage.googleapis.com/zenn-user-upload/5898f8b4463a-20231123.png)\n\n![](https://storage.googleapis.com/zenn-user-upload/24fe5c9f6e22-20231123.png)\n\n無事に Firestore にデータが保存され、通知が届きました 🎉\n\nもう一度、Scheduler を実行してみましょう。\nFirestore にデータが保存されているので、同じ通知が届かなくなっています。\n\nこれで、管理したいウォレットのアドレスを同様に登録することで、\nマルチプルにウォレットのステイキング報酬を管理することができるようになりました 🎉\n\n## 📊 スプレッドシートを作成する\n\n続いて、新規データ追加時に `Google スプレッドシート` にデータを同期するように設定したいと思います。\n\nまずは以下のリンクより Google スプレッドシートを作成し、\n\nスプレッドシート ID - `spreadsheetId`\nシート名 - `sheetTitle` (ここでは StakeRewards)\n\nをメモしておいてください。\n\nヘッダーには以下の値をコピーして貼り付けて下さい。\n\n```bash\nDate\tAddress\tRewardAmount(SOL)\tEpoch\tPostBalance(SOL)\n```\n\nhttps://docs.google.com/spreadsheets\n\n![](https://storage.googleapis.com/zenn-user-upload/845a9fad4bae-20231123.png)\n\nそして右上の `Share` からあなたのサービスアカウントを追加します。\n\nサービスアカウントはあなたが設定した `appName` と `project-id`に置き換えて下さい。\n\n```bash\n<appName>@<project-id>.iam.gserviceaccount.com\n```\n\n`appName` は `./skeet-cloud.config.json` の app:name と同じ値になります。\n\n## 🔄 スプレッドシートと同期する機能を追加する\n\n先ほど作成した `stakeMonitor` に機能を追加することもできますが、\n多くのアドレスを管理する場合に処理が重くなってしまうため、ここでは、`Firestore` トリガーの `Cloud Functions for Firebase` に切り分けて追加したいと思います。\n\nまずは `@skeet-framework/spreadsheet-utils` パッケージを追加します。\n\n```bash\nskeet yarn add -p @skeet-framework/spreadsheet-utils\n```\n\n`skeet add method` コマンドで `firestore` インスタンステンプレートを追加します。\n\n```bash\nskeet add method addSpreadsheet\n? Select Instance Type to add firestore\n✔ ./functions/skeet/src/routings/firestore/addSpreadsheet.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n```\n\nそして以下のように `addSpreadsheet.ts` を編集します。\n\n```ts\nimport { onDocumentCreated } from 'firebase-functions/v2/firestore'\nimport { firestoreDefaultOption } from '@/routings/options'\nimport { addDataToSheet } from '@skeet-framework/spreadsheet-utils'\nimport { sendDiscord } from '@skeet-framework/utils'\nimport { defineSecret } from 'firebase-functions/params'\n\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\n\nexport const addSpreadsheet = onDocumentCreated(\n  {\n    ...firestoreDefaultOption('Wallet/{pubkey}/WalletStakeReward/{epoch}'),\n    secrets: [DISCORD_WEBHOOK_URL],\n  },\n  async (event) => {\n    console.log(`addSpreadsheet triggered!`)\n    try {\n      // Define spreadsheet params\n      const spreadsheetId = '1mLN3pUee-thUfys-UfpeHvnjVmZZX_KLWxp76-49COY'\n      const sheetTitle = 'StakeRewards'\n      const walletPubkey = event.params.pubkey\n      const epoch = event.data?.get('epoch') as number\n      const totalRewardAmount = event.data?.get('totalRewardAmount') as number\n      const totalBalance = event.data?.get('totalBalance') as number\n\n      // Add data to spreadsheet\n      await addDataToSheet(spreadsheetId, sheetTitle, [\n        [\n          event.data?.get('date'),\n          walletPubkey,\n          totalRewardAmount,\n          epoch,\n          totalBalance,\n        ],\n      ])\n\n      // Generate Message Content\n      const content = `Account: ${walletPubkey}\nEpoch: ${epoch}\nReward: ${totalRewardAmount} SOL\nTotal SOL: ${totalBalance} SOL`\n\n      // Send discord message\n      await sendDiscord(content, {\n        webhookUrl: DISCORD_WEBHOOK_URL.value(),\n        username: 'Skeet Staking Monitor',\n      })\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\nDiscord での通知も `stakeMonitor` から `addSpreadsheet` に移動し、\nGoogle スプレッドシートに新しいデータが追加された時に通知するように変更します。\n\n## 🛠️ stakeMonitor を更新する\n\nなので、以下のように `stakeMonitor.ts` から Discord 通知部分を取り除きます。\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { schedulePublicOption } from '@/routings/options'\nimport {\n  RewardDataResponse,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} from '@skeet-framework/solana-utils'\nimport { defineSecret } from 'firebase-functions/params'\nimport { format } from '@skeet-framework/utils'\nimport { add, get, query, update } from '@skeet-framework/firestore'\nimport {\n  Wallet,\n  WalletCN,\n  WalletStakeReward,\n  genWalletStakeRewardPath,\n} from '@/models/walletModels'\nimport { db } from '@/index'\n\n// Define secrets\nconst HELIUS_ENDPOINT = defineSecret('HELIUS_ENDPOINT')\n\nexport const stakeMonitor = onSchedule(\n  { ...schedulePublicOption, secrets: [HELIUS_ENDPOINT] },\n  async (event) => {\n    try {\n      // Get all wallets\n      const wallets = await query<Wallet>(db, WalletCN, [\n        { field: 'pubkey', operator: '!=', value: '' },\n      ])\n\n      // If no wallet found, return\n      if (wallets.length === 0) {\n        console.log({ status: 'error', message: 'No wallet found' })\n        return\n      }\n\n      // Check if already checked\n      const lastEpoch = await getCurrentEpoch(HELIUS_ENDPOINT.value())\n      const lastReward = await get<WalletStakeReward>(\n        db,\n        genWalletStakeRewardPath(wallets[0].pubkey),\n        String(lastEpoch - 1)\n      )\n\n      // If already checked, return\n      if (lastReward) {\n        console.log({ status: 'ok', message: 'Already checked' })\n        return\n      }\n\n      // Get wallet\n      const wallet = await get<Wallet>(db, WalletCN, wallets[0].pubkey)\n      if (!wallet) {\n        console.log({ status: 'error', message: 'Wallet not found' })\n        return\n      }\n\n      // Get all stake rewards\n      for await (const wallet of wallets) {\n        const walletPubkey = wallet.pubkey\n        const result: RewardDataResponse = await getAllStakeRewardsByPubkey(\n          HELIUS_ENDPOINT.value(),\n          walletPubkey\n        )\n        const walletStakeRewardParams: WalletStakeReward = {\n          date: format(new Date(), 'yyyy-MM-dd'),\n          epoch: result.epoch,\n          totalRewardAmount: result.totalRewardAmount,\n          totalBalance: result.totalBalance,\n        }\n\n        // Add walletStakeReward\n        await add<WalletStakeReward>(\n          db,\n          genWalletStakeRewardPath(walletPubkey),\n          walletStakeRewardParams,\n          String(result.epoch)\n        )\n\n        // Update wallet totalSol and totalRewardAmount\n        await update<Wallet>(db, WalletCN, walletPubkey, {\n          totalSol: wallet.totalSol + result.totalBalance,\n          totalRewardAmount:\n            wallet.totalRewardAmount + result.totalRewardAmount,\n        })\n      }\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## 🚀 デプロイしてアプリを更新する\n\nそれでは再度デプロイを行い、アプリを更新します。\n\n```bash\nskeet deploy\n? Select Functions to deploy (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter>\nto proceed)\n  = Functions =\n ◯ solvMonitor\n ◉ stakeMonitor\n❯◉ addSpreadsheet\n```\n\n## ⏲️ Scheduler を実行する\n\nもう一度 Firestore の `WalletStakeReward` のレコードを削除し、\n\nScheduler を実行します。\n\n無事にスプレッドシートが更新され、\nDiscord に通知が届きました 🎉\n\n![](https://storage.googleapis.com/zenn-user-upload/2bd77535a879-20231123.png)\n\nこれで定期チェック時に新規データがあった場合のみ、通知を行い、スプレッドシートと同期することができるようになりました。\n\n## 🌐 ロードバランサーと Google Cloud Armor の組み合わせ\n\nWebhook エンドポイントの強化\n\nFirebase Functions は迅速かつ効率的に Webhook エンドポイントを構築する強力なツールですが、プロジェクトが成長するにつれて、そのインフラを強化する必要が出てきます。この点で、ロードバランサーの導入がキーとなります。ロードバランサーを使用することで、エンドポイントのパフォーマンスと信頼性が大幅に向上し、高いトラフィックや異常なアクセスパターンに対しても弾力的に対応することができます。\n\nさらに、Google Cloud Armor の統合により、セキュリティ面でも大きな強化が図られます。Google Cloud Armor は、DDoS 攻撃やウェブ攻撃から保護するための強力なツールであり、ロードバランサーと併用することで、Webhook エンドポイントを様々な脅威から守る堅牢な防御層を提供します。これにより、エンドユーザーへのサービス提供がさらに安定し、ビジネスの信頼性も高まります。\n\n初期段階ではシンプルなセットアップで問題なく開始できますが、プロジェクトの成長に伴い、ロードバランサーと Google Cloud Armor の導入を検討することで、ネットワークの安定性とセキュリティを大幅に強化することが可能です。この戦略的アプローチにより、ビジネスがスケールアップする過程でのニーズに迅速に対応し、エンドユーザーに対して一貫して高品質なサービスを提供することができるようになります。\n\nロードバランサーと Google Cloud Armor の設定方法については、\n以下のリンクで詳細をご確認いただけます。\n\nhttps://skeet.dev/ja/doc/skeet-firestore/initial-deploy/\n\n## 🎉 まとめ：Solana バリデーターの旅路の完結と EpicsDAO コミュニティへの招待\n\n本書を通じて、Solana ネットワークのバリデーターとしての道を歩むための包括的なガイドを提供しました。初心者から上級者まで、Solana バリデーターの設定、運用、更新に至るまでの全ステップをわかりやすく解説し、読者一人ひとりがこの分野で成功するための知識とツールを手に入れることを目指しました。\n\n特に重要なのは、'solv' というオープンソースツールの導入です。このツールにより、Solana バリデーターの設定と運用が大幅に簡素化され、より迅速かつ効率的になりました。安全なシークレットキーの管理から、ノードの効率的な再構築まで、本書はあなたが Solana バリデーターとして活躍するための確固たる支援となるでしょう。\n\n第 1 章から第 4 章にわたる旅は、ただの技術的な学習にとどまらず、ブロックチェーンの未来を切り拓く大きな一歩となります。本書を手にしたあなたは、Solana ネットワークの一員として、新たな価値を創造し、ブロックチェーン技術の進化に貢献することができるのです。\n\nこのガイドを終えた今、さらなる交流と学習のために、EpicsDAO の Discord チャンネルへの参加をお勧めします。ここでは、同じ志を持つ開発者たちが集まり、経験と知識を共有し、互いに支援し合っています。あなたの一歩が、ブロックチェーンの未来に新たな章を刻むことになるでしょう。\n\nEpicsDAO Discord チャンネルへの招待リンク:\n\nhttps://discord.gg/jZQ33byATb\n\n一緒に学び、成長し、新たなプロジェクトの可能性を探求しましょう。あなたの参加を心よりお待ちしています。\n"},"articleHtml":"<p>この章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。データ収集から分析、報告までの全プロセスをカバーし、リアルタイムでのパフォーマンス追跡と意思決定の迅速化を目指します。Firestore の強力なデータベース機能と Google スプレッドシートのアクセシビリティを組み合わせることで、収益管理の自動化と最適化を実現します。本章を通じて、技術的な知識だけでなく、効果的なデータ活用方法を身につけることができます。</p>\n<h2 id=\"-firestore-のモデルを作成する\" class=\"font-extrabold tracking-tighter break-word\">📝 Firestore のモデルを作成する</h2>\n<p>前回の章の状態だと、スケジューラーがチェックをするたびに重複するデータを通知してしまいます。\n<code>Firestore</code> にデータを記録し、新しいデータが追加された時のみに通知するように改善していきます。</p>\n<p><code>Wallet</code> と <code>WalletStakeReward</code> という二つのモデルを以下に作成します。</p>\n<p><code>functions/skeet/src/models/walletModels.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Timestamp</span>, <span class=\"hljs-title class_\">FieldValue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n\n<span class=\"hljs-comment\">// CollectionId: WalletPubkey</span>\n<span class=\"hljs-comment\">// DocumentId: walletPubkey - e.g. LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9</span>\n<span class=\"hljs-comment\">// Path: WalletPubkey</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">WalletPubkeyCN</span> = <span class=\"hljs-string\">'WalletPubkey'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">genWalletPubkeyPath</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-string\">`<span class=\"hljs-subst\">${WalletPubkeyCN}</span>`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WalletPubkey</span> = {\n  id?: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">walletPubkey</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">totalSol</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-built_in\">number</span>\n  createdAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n  updatedAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n}\n\n<span class=\"hljs-comment\">// CollectionId: StakeReward</span>\n<span class=\"hljs-comment\">// DocumentId: epoch - e.g. 420</span>\n<span class=\"hljs-comment\">// Path: StakeReward</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StakeRewardCN</span> = <span class=\"hljs-string\">'StakeReward'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">genStakeRewardPath</span> = (<span class=\"hljs-params\">pubkey: <span class=\"hljs-built_in\">string</span></span>) =>\n  <span class=\"hljs-string\">`<span class=\"hljs-subst\">${WalletPubkeyCN}</span>/<span class=\"hljs-subst\">${pubkey}</span>/<span class=\"hljs-subst\">${StakeRewardCN}</span>`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">StakeReward</span> = {\n  id?: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">walletPubkey</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">epoch</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalBalance</span>: <span class=\"hljs-built_in\">number</span>\n  createdAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n  updatedAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n}\n</code></pre>\n<h2 id=\"-管理するアドレスを登録する\" class=\"font-extrabold tracking-tighter break-word\">📌 管理するアドレスを登録する</h2>\n<p>TDS のリワードは毎月、<code>authority</code> アカウントに対してステイキングアカウントが発行されますが、ここでは <code>@skeet-framework/solana-utils</code> を使い、 <code>authority</code> アカウントのアドレスを登録すると、それに紐づくステイクアカウントの報酬をまとめて確認することができるように設定します。</p>\n<p>以下のディレクトリに管理するウォレットの pubkey を Firestore に登録するスクリプトを作成します。\nFirebase のブラウザから直接データを入力することもできるので、任意の方法でデータを追加して下さい。</p>\n<p><code>functions/skeet/src/script/addWallet.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Wallet</span>, <span class=\"hljs-title class_\">WalletCN</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { add } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> { format } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> admin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-admin'</span>\nadmin.<span class=\"hljs-title function_\">initializeApp</span>()\n<span class=\"hljs-keyword\">const</span> db = admin.<span class=\"hljs-title function_\">firestore</span>()\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addWallet</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">pubkey: <span class=\"hljs-built_in\">string</span></span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletParams</span>: <span class=\"hljs-title class_\">Wallet</span> = {\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n    pubkey,\n    <span class=\"hljs-attr\">totalSol</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-number\">0</span>,\n  }\n  <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletParams, pubkey)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">run</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> pubkey = <span class=\"hljs-string\">'your-authority-keypair'</span>\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">addWallet</span>(pubkey)\n}\n\n<span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<p><code>functions/skeet</code> ディレクトリに移動して、スクリプトを実行します。</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">functions</span>/skeet &#x26;&#x26; npx ts-node -r tsconfig-paths/register --transpile-only src/scripts/addWallet.ts\n{ status: <span class=\"hljs-string\">'success'</span> }\n</code></pre>\n<p>Firebase の Firestore を確認してみると、無事にデータが作成されました 🎉</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/bd7e20abeb4b-20231123.png\" alt=\"\"></p>\n<h2 id=\"-stakemonitor-を更新する\" class=\"font-extrabold tracking-tighter break-word\">🔄 StakeMonitor を更新する</h2>\n<p>それでは <code>StakeMonitor</code> を以下のように更新します。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { schedulePublicOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">RewardDataResponse</span>,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> { format, sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { add, get, query, update } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Wallet</span>,\n  <span class=\"hljs-title class_\">WalletCN</span>,\n  <span class=\"hljs-title class_\">WalletStakeReward</span>,\n  genWalletStakeRewardPath,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { db } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/index'</span>\n\n<span class=\"hljs-comment\">// Define secrets</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'HELIUS_ENDPOINT'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakeMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...schedulePublicOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>, <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Get all wallets</span>\n      <span class=\"hljs-keyword\">const</span> wallets = <span class=\"hljs-keyword\">await</span> query&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, [\n        { <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'pubkey'</span>, <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-string\">'!='</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">''</span> },\n      ])\n\n      <span class=\"hljs-comment\">// If no wallet found, return</span>\n      <span class=\"hljs-keyword\">if</span> (wallets.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'No wallet found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Check if already checked</span>\n      <span class=\"hljs-keyword\">const</span> lastEpoch = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCurrentEpoch</span>(<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>())\n      <span class=\"hljs-keyword\">const</span> lastReward = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n        db,\n        <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>),\n        <span class=\"hljs-title class_\">String</span>(lastEpoch - <span class=\"hljs-number\">1</span>)\n      )\n\n      <span class=\"hljs-comment\">// If already checked, return</span>\n      <span class=\"hljs-keyword\">if</span> (lastReward) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'ok'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Already checked'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get wallet</span>\n      <span class=\"hljs-keyword\">const</span> wallet = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>)\n      <span class=\"hljs-keyword\">if</span> (!wallet) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Wallet not found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get all stake rewards</span>\n      <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> wallet <span class=\"hljs-keyword\">of</span> wallets) {\n        <span class=\"hljs-keyword\">const</span> walletPubkey = wallet.<span class=\"hljs-property\">pubkey</span>\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">RewardDataResponse</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAllStakeRewardsByPubkey</span>(\n          <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>(),\n          walletPubkey\n        )\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletStakeRewardParams</span>: <span class=\"hljs-title class_\">WalletStakeReward</span> = {\n          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n          <span class=\"hljs-attr\">epoch</span>: result.<span class=\"hljs-property\">epoch</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>: result.<span class=\"hljs-property\">totalRewardAmount</span>,\n          <span class=\"hljs-attr\">totalBalance</span>: result.<span class=\"hljs-property\">totalBalance</span>,\n        }\n\n        <span class=\"hljs-comment\">// Add walletStakeReward</span>\n        <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n          db,\n          <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(walletPubkey),\n          walletStakeRewardParams,\n          <span class=\"hljs-title class_\">String</span>(result.<span class=\"hljs-property\">epoch</span>)\n        )\n\n        <span class=\"hljs-comment\">// Update wallet totalSol and totalRewardAmount</span>\n        <span class=\"hljs-keyword\">await</span> update&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletPubkey, {\n          <span class=\"hljs-attr\">totalSol</span>: wallet.<span class=\"hljs-property\">totalSol</span> + result.<span class=\"hljs-property\">totalBalance</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>:\n            wallet.<span class=\"hljs-property\">totalRewardAmount</span> + result.<span class=\"hljs-property\">totalRewardAmount</span>,\n        })\n\n        <span class=\"hljs-comment\">// Generate content</span>\n        <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Account: <span class=\"hljs-subst\">${walletPubkey}</span>\nEpoch: <span class=\"hljs-subst\">${result.epoch}</span>\nReward: <span class=\"hljs-subst\">${result.totalRewardAmount}</span> SOL\nTotal SOL: <span class=\"hljs-subst\">${result.totalBalance}</span> SOL\n`</span>\n\n        <span class=\"hljs-comment\">// Send discord message</span>\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n          <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n          <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Staking Monitor'</span>,\n        })\n      }\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-デプロイしてアプリを更新する\" class=\"font-extrabold tracking-tighter break-word\">🚀 デプロイしてアプリを更新する</h2>\n<p>デプロイを行い変更を反映させます。</p>\n<pre><code class=\"hljs language-bash\">skeet deploy --<span class=\"hljs-keyword\">function</span> skeet:stakeMonitor\n</code></pre>\n<h2 id=\"️-scheduler-を実行する\" class=\"font-extrabold tracking-tighter break-word\">⏲️ Scheduler を実行する</h2>\n<p>同様に Scheduler から実行してみると</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/8588406d71be-20231123.png\" alt=\"\"></p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/5898f8b4463a-20231123.png\" alt=\"\"></p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/24fe5c9f6e22-20231123.png\" alt=\"\"></p>\n<p>無事に Firestore にデータが保存され、通知が届きました 🎉</p>\n<p>もう一度、Scheduler を実行してみましょう。\nFirestore にデータが保存されているので、同じ通知が届かなくなっています。</p>\n<p>これで、管理したいウォレットのアドレスを同様に登録することで、\nマルチプルにウォレットのステイキング報酬を管理することができるようになりました 🎉</p>\n<h2 id=\"-スプレッドシートを作成する\" class=\"font-extrabold tracking-tighter break-word\">📊 スプレッドシートを作成する</h2>\n<p>続いて、新規データ追加時に <code>Google スプレッドシート</code> にデータを同期するように設定したいと思います。</p>\n<p>まずは以下のリンクより Google スプレッドシートを作成し、</p>\n<p>スプレッドシート ID - <code>spreadsheetId</code>\nシート名 - <code>sheetTitle</code> (ここでは StakeRewards)</p>\n<p>をメモしておいてください。</p>\n<p>ヘッダーには以下の値をコピーして貼り付けて下さい。</p>\n<pre><code class=\"hljs language-bash\">Date\tAddress\tRewardAmount(SOL)\tEpoch\tPostBalance(SOL)\n</code></pre>\n<p><a href=\"https://docs.google.com/spreadsheets\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.google.com/spreadsheets</a></p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/845a9fad4bae-20231123.png\" alt=\"\"></p>\n<p>そして右上の <code>Share</code> からあなたのサービスアカウントを追加します。</p>\n<p>サービスアカウントはあなたが設定した <code>appName</code> と <code>project-id</code>に置き換えて下さい。</p>\n<pre><code class=\"hljs language-bash\">&#x3C;appName>@&#x3C;project-id>.iam.gserviceaccount.com\n</code></pre>\n<p><code>appName</code> は <code>./skeet-cloud.config.json</code> の app<div></div> と同じ値になります。</p>\n<h2 id=\"-スプレッドシートと同期する機能を追加する\" class=\"font-extrabold tracking-tighter break-word\">🔄 スプレッドシートと同期する機能を追加する</h2>\n<p>先ほど作成した <code>stakeMonitor</code> に機能を追加することもできますが、\n多くのアドレスを管理する場合に処理が重くなってしまうため、ここでは、<code>Firestore</code> トリガーの <code>Cloud Functions for Firebase</code> に切り分けて追加したいと思います。</p>\n<p>まずは <code>@skeet-framework/spreadsheet-utils</code> パッケージを追加します。</p>\n<pre><code class=\"hljs language-bash\">skeet yarn add -p @skeet-framework/spreadsheet-utils\n</code></pre>\n<p><code>skeet add method</code> コマンドで <code>firestore</code> インスタンステンプレートを追加します。</p>\n<pre><code class=\"hljs language-bash\">skeet add method addSpreadsheet\n? Select Instance Type to add firestore\n✔ ./functions/skeet/src/routings/firestore/addSpreadsheet.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n</code></pre>\n<p>そして以下のように <code>addSpreadsheet.ts</code> を編集します。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onDocumentCreated } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/firestore'</span>\n<span class=\"hljs-keyword\">import</span> { firestoreDefaultOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> { addDataToSheet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/spreadsheet-utils'</span>\n<span class=\"hljs-keyword\">import</span> { sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> addSpreadsheet = <span class=\"hljs-title function_\">onDocumentCreated</span>(\n  {\n    ...<span class=\"hljs-title function_\">firestoreDefaultOption</span>(<span class=\"hljs-string\">'Wallet/{pubkey}/WalletStakeReward/{epoch}'</span>),\n    <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>],\n  },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`addSpreadsheet triggered!`</span>)\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Define spreadsheet params</span>\n      <span class=\"hljs-keyword\">const</span> spreadsheetId = <span class=\"hljs-string\">'1mLN3pUee-thUfys-UfpeHvnjVmZZX_KLWxp76-49COY'</span>\n      <span class=\"hljs-keyword\">const</span> sheetTitle = <span class=\"hljs-string\">'StakeRewards'</span>\n      <span class=\"hljs-keyword\">const</span> walletPubkey = event.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">pubkey</span>\n      <span class=\"hljs-keyword\">const</span> epoch = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'epoch'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n      <span class=\"hljs-keyword\">const</span> totalRewardAmount = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'totalRewardAmount'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n      <span class=\"hljs-keyword\">const</span> totalBalance = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'totalBalance'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n\n      <span class=\"hljs-comment\">// Add data to spreadsheet</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">addDataToSheet</span>(spreadsheetId, sheetTitle, [\n        [\n          event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'date'</span>),\n          walletPubkey,\n          totalRewardAmount,\n          epoch,\n          totalBalance,\n        ],\n      ])\n\n      <span class=\"hljs-comment\">// Generate Message Content</span>\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Account: <span class=\"hljs-subst\">${walletPubkey}</span>\nEpoch: <span class=\"hljs-subst\">${epoch}</span>\nReward: <span class=\"hljs-subst\">${totalRewardAmount}</span> SOL\nTotal SOL: <span class=\"hljs-subst\">${totalBalance}</span> SOL`</span>\n\n      <span class=\"hljs-comment\">// Send discord message</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n        <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Staking Monitor'</span>,\n      })\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<p>Discord での通知も <code>stakeMonitor</code> から <code>addSpreadsheet</code> に移動し、\nGoogle スプレッドシートに新しいデータが追加された時に通知するように変更します。</p>\n<h2 id=\"️-stakemonitor-を更新する\" class=\"font-extrabold tracking-tighter break-word\">🛠️ stakeMonitor を更新する</h2>\n<p>なので、以下のように <code>stakeMonitor.ts</code> から Discord 通知部分を取り除きます。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { schedulePublicOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">RewardDataResponse</span>,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> { format } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { add, get, query, update } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Wallet</span>,\n  <span class=\"hljs-title class_\">WalletCN</span>,\n  <span class=\"hljs-title class_\">WalletStakeReward</span>,\n  genWalletStakeRewardPath,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { db } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/index'</span>\n\n<span class=\"hljs-comment\">// Define secrets</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'HELIUS_ENDPOINT'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakeMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...schedulePublicOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Get all wallets</span>\n      <span class=\"hljs-keyword\">const</span> wallets = <span class=\"hljs-keyword\">await</span> query&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, [\n        { <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'pubkey'</span>, <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-string\">'!='</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">''</span> },\n      ])\n\n      <span class=\"hljs-comment\">// If no wallet found, return</span>\n      <span class=\"hljs-keyword\">if</span> (wallets.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'No wallet found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Check if already checked</span>\n      <span class=\"hljs-keyword\">const</span> lastEpoch = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCurrentEpoch</span>(<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>())\n      <span class=\"hljs-keyword\">const</span> lastReward = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n        db,\n        <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>),\n        <span class=\"hljs-title class_\">String</span>(lastEpoch - <span class=\"hljs-number\">1</span>)\n      )\n\n      <span class=\"hljs-comment\">// If already checked, return</span>\n      <span class=\"hljs-keyword\">if</span> (lastReward) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'ok'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Already checked'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get wallet</span>\n      <span class=\"hljs-keyword\">const</span> wallet = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>)\n      <span class=\"hljs-keyword\">if</span> (!wallet) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Wallet not found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get all stake rewards</span>\n      <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> wallet <span class=\"hljs-keyword\">of</span> wallets) {\n        <span class=\"hljs-keyword\">const</span> walletPubkey = wallet.<span class=\"hljs-property\">pubkey</span>\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">RewardDataResponse</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAllStakeRewardsByPubkey</span>(\n          <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>(),\n          walletPubkey\n        )\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletStakeRewardParams</span>: <span class=\"hljs-title class_\">WalletStakeReward</span> = {\n          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n          <span class=\"hljs-attr\">epoch</span>: result.<span class=\"hljs-property\">epoch</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>: result.<span class=\"hljs-property\">totalRewardAmount</span>,\n          <span class=\"hljs-attr\">totalBalance</span>: result.<span class=\"hljs-property\">totalBalance</span>,\n        }\n\n        <span class=\"hljs-comment\">// Add walletStakeReward</span>\n        <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n          db,\n          <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(walletPubkey),\n          walletStakeRewardParams,\n          <span class=\"hljs-title class_\">String</span>(result.<span class=\"hljs-property\">epoch</span>)\n        )\n\n        <span class=\"hljs-comment\">// Update wallet totalSol and totalRewardAmount</span>\n        <span class=\"hljs-keyword\">await</span> update&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletPubkey, {\n          <span class=\"hljs-attr\">totalSol</span>: wallet.<span class=\"hljs-property\">totalSol</span> + result.<span class=\"hljs-property\">totalBalance</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>:\n            wallet.<span class=\"hljs-property\">totalRewardAmount</span> + result.<span class=\"hljs-property\">totalRewardAmount</span>,\n        })\n      }\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-デプロイしてアプリを更新する-1\" class=\"font-extrabold tracking-tighter break-word\">🚀 デプロイしてアプリを更新する</h2>\n<p>それでは再度デプロイを行い、アプリを更新します。</p>\n<pre><code class=\"hljs language-bash\">skeet deploy\n? Select Functions to deploy (Press &#x3C;space> to <span class=\"hljs-keyword\">select</span>, &#x3C;a> to toggle all, &#x3C;i> to invert selection, and &#x3C;enter>\nto proceed)\n  = Functions =\n ◯ solvMonitor\n ◉ stakeMonitor\n❯◉ addSpreadsheet\n</code></pre>\n<h2 id=\"️-scheduler-を実行する-1\" class=\"font-extrabold tracking-tighter break-word\">⏲️ Scheduler を実行する</h2>\n<p>もう一度 Firestore の <code>WalletStakeReward</code> のレコードを削除し、</p>\n<p>Scheduler を実行します。</p>\n<p>無事にスプレッドシートが更新され、\nDiscord に通知が届きました 🎉</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/2bd77535a879-20231123.png\" alt=\"\"></p>\n<p>これで定期チェック時に新規データがあった場合のみ、通知を行い、スプレッドシートと同期することができるようになりました。</p>\n<h2 id=\"-ロードバランサーと-google-cloud-armor-の組み合わせ\" class=\"font-extrabold tracking-tighter break-word\">🌐 ロードバランサーと Google Cloud Armor の組み合わせ</h2>\n<p>Webhook エンドポイントの強化</p>\n<p>Firebase Functions は迅速かつ効率的に Webhook エンドポイントを構築する強力なツールですが、プロジェクトが成長するにつれて、そのインフラを強化する必要が出てきます。この点で、ロードバランサーの導入がキーとなります。ロードバランサーを使用することで、エンドポイントのパフォーマンスと信頼性が大幅に向上し、高いトラフィックや異常なアクセスパターンに対しても弾力的に対応することができます。</p>\n<p>さらに、Google Cloud Armor の統合により、セキュリティ面でも大きな強化が図られます。Google Cloud Armor は、DDoS 攻撃やウェブ攻撃から保護するための強力なツールであり、ロードバランサーと併用することで、Webhook エンドポイントを様々な脅威から守る堅牢な防御層を提供します。これにより、エンドユーザーへのサービス提供がさらに安定し、ビジネスの信頼性も高まります。</p>\n<p>初期段階ではシンプルなセットアップで問題なく開始できますが、プロジェクトの成長に伴い、ロードバランサーと Google Cloud Armor の導入を検討することで、ネットワークの安定性とセキュリティを大幅に強化することが可能です。この戦略的アプローチにより、ビジネスがスケールアップする過程でのニーズに迅速に対応し、エンドユーザーに対して一貫して高品質なサービスを提供することができるようになります。</p>\n<p>ロードバランサーと Google Cloud Armor の設定方法については、\n以下のリンクで詳細をご確認いただけます。</p>\n<p><a href=\"https://skeet.dev/ja/doc/skeet-firestore/initial-deploy/\" target=\"_blank\" rel=\"noopener noreferrer\">https://skeet.dev/ja/doc/skeet-firestore/initial-deploy/</a></p>\n<h2 id=\"-まとめsolana-バリデーターの旅路の完結と-epicsdao-コミュニティへの招待\" class=\"font-extrabold tracking-tighter break-word\">🎉 まとめ：Solana バリデーターの旅路の完結と EpicsDAO コミュニティへの招待</h2>\n<p>本書を通じて、Solana ネットワークのバリデーターとしての道を歩むための包括的なガイドを提供しました。初心者から上級者まで、Solana バリデーターの設定、運用、更新に至るまでの全ステップをわかりやすく解説し、読者一人ひとりがこの分野で成功するための知識とツールを手に入れることを目指しました。</p>\n<p>特に重要なのは、'solv' というオープンソースツールの導入です。このツールにより、Solana バリデーターの設定と運用が大幅に簡素化され、より迅速かつ効率的になりました。安全なシークレットキーの管理から、ノードの効率的な再構築まで、本書はあなたが Solana バリデーターとして活躍するための確固たる支援となるでしょう。</p>\n<p>第 1 章から第 4 章にわたる旅は、ただの技術的な学習にとどまらず、ブロックチェーンの未来を切り拓く大きな一歩となります。本書を手にしたあなたは、Solana ネットワークの一員として、新たな価値を創造し、ブロックチェーン技術の進化に貢献することができるのです。</p>\n<p>このガイドを終えた今、さらなる交流と学習のために、EpicsDAO の Discord チャンネルへの参加をお勧めします。ここでは、同じ志を持つ開発者たちが集まり、経験と知識を共有し、互いに支援し合っています。あなたの一歩が、ブロックチェーンの未来に新たな章を刻むことになるでしょう。</p>\n<p>EpicsDAO Discord チャンネルへの招待リンク:</p>\n<p><a href=\"https://discord.gg/jZQ33byATb\" target=\"_blank\" rel=\"noopener noreferrer\">https://discord.gg/jZQ33byATb</a></p>\n<p>一緒に学び、成長し、新たなプロジェクトの可能性を探求しましょう。あなたの参加を心よりお待ちしています。</p>","title":"第4章: 📊🔥 Firestore と Google スプレッドシートを活用した収益管理 - 効率的なデータ追跡と分析の実践ガイド 📈 | solv - Solana バリデーター・RPCノードを簡単に立ち上げ、手間なく管理するオープンソースツール","seoData":[{"property":"og:title","content":"第4章: 📊🔥 Firestore と Google スプレッドシートを活用した収益管理 - 効率的なデータ追跡と分析の実践ガイド 📈 | solv - Solana バリデーター・RPCノードを簡単に立ち上げ、手間なく管理するオープンソースツール"},{"name":"twitter:title","content":"第4章: 📊🔥 Firestore と Google スプレッドシートを活用した収益管理 - 効率的なデータ追跡と分析の実践ガイド 📈 | solv - Solana バリデーター・RPCノードを簡単に立ち上げ、手間なく管理するオープンソースツール"},{"name":"twitter:text:title","content":"第4章: 📊🔥 Firestore と Google スプレッドシートを活用した収益管理 - 効率的なデータ追跡と分析の実践ガイド 📈 | solv - Solana バリデーター・RPCノードを簡単に立ち上げ、手間なく管理するオープンソースツール"},{"name":"description","content":"この章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。"},{"property":"og:description","content":"この章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。"},{"name":"twitter:description","content":"この章では、Firebase の Firestore と Google スプレッドシートを駆使して、Solana バリデーターとしての収益を効率的に管理する方法を解説します。"},{"property":"og:url","content":"https://solv.epics.dev/ja/doc/tutorial/chapter4"},{"property":"og:image","content":"https://solv.epics.dev/ogp.png"},{"property":"og:image:secure","content":"https://solv.epics.dev/ogp.png"},{"name":"twitter:image","content":"https://solv.epics.dev/ogp.png"}],"_nextI18Next":{"initialI18nStore":{"ja":{"common":{"contactToTeam":"チームに相談","privacy":"プライバシーポリシー","404title":"ページが見つかりませんでした","404body":"すみません、お探しのページは見つかりませんでした。","backToTop":"トップページに戻る","toc":"目次","openMenu":"メニューを開く","closeMenu":"メニューを閉じる","media":"メディア","news":"ニュース","books":"本","copy":"コピー","copied":"コピーしました!","solvInstall":"solvのインストール","updateSettings":"設定の更新","setupSolv":"セットアップ","thatsAll":"完了!","navs":{"defaultMainNav":{"quickstart":"クイックスタート","news":"ニュース","doc":"ドキュメント","dao":"DAO","enterprise":"エンタープライズ","contact":"お問い合わせ"},"commonFooterNav":{"quickstart":"クイックスタート","news":"ニュース","doc":"ドキュメント","enterprise":"エンタープライズ","dao":"DAO","contact":"お問い合わせ","privacy":"プライバシーポリシー","press-kits":"プレスキット"}},"AgreeToPolicy":{"title":"クッキーについて","body":"私達および私達のサードパーティパートナーは、Cookie および類似の技術を使用して、IP アドレスやデジタル識別子などの特定の情報を処理し、サイトの使用状況を分析し、ユーザー体験向上に努めます。 詳しくはプライバシーポリシーをお読みください。","yes":"はい、承諾します","no":"いいえ、やめてください"},"ContactRow":{"discord":{"title":"コミュニティ Discord","body":"各種お問い合わせ等ございましたらコミュニティDiscord内にてサポートチケットを作成してください。","button":"JOIN"},"form":{"title":"チームに相談","body":"開発やサポートについて等、各種お問い合わせございましたらこちらからなんでもご相談ください。","button":"Go"}},"CTASectionRow":{"title":"Solana バリデータ向けユーティリティツール","body":"solv は Solana バリデータ及びRPCノードのセットアップと運用を簡略化するためのオープンソースツールです。","button":"クイックスタート","demo":"デモを試す"},"WhyOpenSourceDevelopmentRow":{"subtitle":"なぜオープンソース開発なのか？","title":"持続可能なテクノロジーの発展と社会全体の利益","description":"オープンソースソフトウェア (OSS) 開発は、現代社会において技術進歩を牽引し、新たな価値創出を可能にしています。","feature1":{"title":"公共財としての価値","description":"オープンソースソフトウェアは、誰でも自由に利用、改良、再配布することができます。これにより、OSSは全人類に対する公共財となるのです。経済的な制約を感じずに、世界中の人々がその価値を享受できます。その結果、社会全体のイノベーションが推進され、デジタル社会の平等性と包括性が増大します。"},"feature2":{"title":"グローバルな協力体制","description":"OSSの世界では、地域や組織の境界を越えて、全世界の開発者が共同でソフトウェアを改善していきます。各人が持つ視点や専門知識がプロジェクトに取り込まれ、その質を高めることが可能となります。OSSはまさにグローバルな知識と経験の集まる場所であり、それが絶えず高品質のソフトウェアを生み出します。"},"feature3":{"title":"車輪の再発明の防止","description":"OSSはコードを再利用することを可能にし、車輪の再発明を防止します。その結果、開発者は一から全てを作り出す労力を減らし、より具体的な問題解決や新たな機能の開発に焦点を合わせることができます。これにより効率性が高まり、より速く、より質の高い成果を生み出すことが可能となります。"}},"RoadmapRow":{"2022.6":"Epics ライトペーパー, TGE(トークンジェネレートイベント)","2022.7":"Epics ジェネシスプリセール","2022.8":"Epics ホワイトペーパー v1","2022.9":"Epics Alpha ローンチ, Solana Summer Camp ハッカソン5位入賞","2022.10":"プリセール for IDO, オランダ政府よりWBSO(先端研究開発プロジェクト)認定","2022.11":"Solana Breakpoint, GitHub issue データオラクル連携開発 (DIA)","2023.1":"IDO $EPCT on Orca (Solana DEX)","2023.4":"Epics DAOがSolanaのテストネットバリデーターに","2023.9":"シードエクステンションラウンド資金調達","2023.12":"Epics プラットフォーム Beta ローンチ","2024.2":"$EPCT が Meteora (Solana DEX) に上場","2024.4":"NFT カードデザイン発表、ニコニコ超会議 2024 出展, ENASE 2024 研究発表","2024.5":"Epics DAOがSolanaのメインネットバリデーターに","2024.8":"NFTカードゲームβテスト開始、Web X 2024 出展","2024.10":"シリーズ A 資金調達、EPCD交換所ローンチ","2025.4":"Epicsプラットフォームメジャーリリース、NFTカードゲーム一般公開開始","2025.9":"シリーズ B 資金調達","2026.4":"IEO $EPCT"},"OurWorksRow":{"WBSO":{"title":"オランダ政府よりWBSO(先端科学技術研究)の認定を受けました","description":"Epics DAOは、オランダ政府よりWBSO(先端科学技術研究)の認定を受けました。Epicsは社会貢献型ブロックチェーンゲーム(BCG)で、持続可能なオープンソース開発環境の実現を目指しています。"},"SolanaValidator":{"title":"Solanaブロックチェーンのバリデーターを運営しています","description":"Epics DAOは、Solana チェーンにおけるバリデーターとして、ネットワークの信頼性と安定性を担保することに尽力します。Solana の高速かつ安定したネットワークを実現するための技術的な側面についても貢献します。"},"SolanaSummerCamp":{"title":"Solana Summer Campハッカソン2022において5位入賞しました","description":"Epics DAO は、2022 年 7 月 11 日 - 8 月 16 日に開催された Solana サマーキャンプハッカソンにおいて、18,000 を超える応募の中、 5 位に入賞いたしました。"},"GoogleWeb3":{"title":"エルソウルラボはGoogle Web3 Startupsプログラムに認定されました","description":"エルソウルラボのWeb3分野における活動のEpics DAO、solvやSkeet等のオープンソース開発を応援する取り組みが認められ、Google Cloud Web3 Startupsプログラムに選出されました。"},"ENASE2024":{"title":"AI・サーバーレス「Skeet」の研究論文が国際会議のENASE2024に採択されました","description":"研究論文「Skeet: Towards a Lightweight Serverless Framework Supporting Modern AI-Driven App Development」について、ソフトウェアエンジニアリングに関する国際会議 ENASE 2024 に採択されました。"},"CHOKAIGI2024":{"title":"Epics DAOがニコニコ超会議2024に出展しました","description":"Epics DAO は、2024 年 4 月 27 日 - 28 日に開催されたニコニコ超会議2024に出展し、限定NFTの配布等を行いました。来場者数は 12 万 5362 人で大盛況の中、無事イベントの終幕を迎えました。"},"WebX2024":{"title":"Epics DAOは WebX 2024 スポンサーです","description":"WebX 2024 は暗号資産やブロックチェーンを含むWeb3の最先端技術に焦点を当てたアジア最大級のイベントで、唯一政府や既存企業とIP企業、Web3企業と交流できるカンファレンスです。"}},"SolvTutorialYouTubeRow":{"title":"Solana バリデーター完全ガイド","subtitle":"YouTube チュートリアル","description":"solv を活用し簡単に Solana バリデーター運用を始めるための完全ガイドを公開いたしました。すでに Solana バリデーターを運用中の方も、ノーダウンタイム移行やスナップショットダウンロードの高速化のメリットのため、solv に簡単に移行していただくことが可能です。"},"SolanaBreakpointSideEventRow":{"title":"Solana バリデーターハンズオン","description":"Solana バリデーターの世界を探求しましょう！この初心者向けのワークショップでは、Latitudeのクラウドサーバーを使用してSolana バリデーターを実際に立ち上げてみることができます。バリデーターはトランザクションを処理、ネットワークを保護し、報酬を獲得します。イベント限定の無料クレジットで、バリデーター運用の実践的な経験を得ることができます。Solana バリデーターのインセンティブ化された世界に飛び込み、学び、交流する機会です。","link":"イベント詳細"},"LatitudeCouponRow":{"subtitle":"ベアメタルクラウドで今すぐお試し","title":"Latitude トライアルクレジットクーポン","description":"Latitude 社 とのパートナーシップにより、$100 分の無料クレジットクーポンを提供することができるようになりました。このクーポンを利用することで、あなたは今すぐに solv を使って Solana バリデーターを実際に手元で試すことができます。","register":"クーポンを登録","couponCode":"クーポンコード"},"StakeForOpenSourceRow":{"subtitle":"オープンソース開発の未来にステークを","title":"ステーク報酬を獲得しながらオープンソース開発を応援しましょう","description":"※ これらは投資助言などを目的としたものではありません。また、記載された情報は、執筆時点のものです。最新の情報をご確認ください。常に NFA / DYOR でお願いいたします。","feature1":{"title":"Solana メインネットバリデーター","description":"Epics DAOが運用するSolanaメインネットバリデーターはステークユーザー様に対する手数料を0%で運営しているため、SOLトークンのステーク報酬は、APR(年利、2024年5月16日現在) 7.58% となっております。Solana ネットワーク分散化への貢献、及び世界中でイノベーションを可能にするため、ノードやデータセンターが少ないエリアに重点を置いて運用を行ってまいります。","button":"バリデーター詳細へ"},"feature2":{"title":"Buidlers Collective (BDLC) NFT","description":"BDLC NFT を Epics プラットフォームにてステークすると、$EPCT トークン報酬を獲得でき、さらに同額の $EPCT がステーク先のオープンソースプロジェクトに寄付され、将来の開発に活用されます。ブロックチェーンを活用して社会貢献型の NFT ステーキング、そして No Loss Donation(元本を失わずステーキング報酬を寄付する)を実現させる取り組みです。","button":"NFT マーケットへ"}},"NicoNicoChoKaigi2024Row":{"subtitle":"超チンチロリン in ニコニコ超会議2024","title":"ご来場ありがとうございました！","description":"Epics DAO は、2024 年 4 月 27 日 - 28 日に幕張メッセにて開催されたニコニコ超会議2024に出展し、来場者限定NFTの配布を行いました。ニコニコ超会議2024の来場者数は 12 万 5362 人、Epics DAO の超チンチロリンブースには約3,000人お越しいただき、大盛況の中無事イベントの終幕を迎えました。"},"WebX2024Row":{"title":"WebX 2024 スポンサー決定","description":"Epics DAO は、WebX 2024 にスポンサーとして参画いたします。WebXは暗号資産やブロックチェーンを含むWeb3の最先端技術に焦点を当てたアジア最大級のイベントで、唯一政府や既存企業とIP企業、Web3企業と交流できるカンファレンスです。","discountLink":"スポンサー特典割引チケット"}},"doc":{"title":"solv ドキュメント","body":"オープンソースの Solana バリデーター向けツール","previousPage":"前のページ","nextPage":"次のページ","actions":{"motivation":{"title":"モチベーション","body":"すべてのSolanaバリデーター、そしてSolanaコミュニティ、オープンソース開発コミュニティにとって有益であると信じてオープンソースとして公開しています。"},"quickstart":{"title":"クイックスタート","body":"solv を使い始めるための簡単3ステップについて説明します。"},"tutorial":{"title":"チュートリアル","body":"solv を使って実際にSolanaバリデーターの運用をスタートするためのガイドです。"},"update":{"title":"ノーダウンタイムアップデート","body":"ダウンタイム無くバリデーターノードを移行する方法を説明します。日々のアップデートにも引っ越しにも有効です。"}},"menuNav":{"home":"ドキュメント ホーム","general":{"groupTitle":"全般","motivation":"モチベーション","quickstart":"クイックスタート"},"quickstart":{"groupTitle":"クイックスタート","start-solv":"solv をはじめる","solv-mev-mode":"solv MEV モード","no-downtime-update":"ノーダウンタイムアップデート"},"tutorial":{"groupTitle":"チュートリアル","chapter1":"1. Solana バリデーター構築","chapter2":"2. バックアップと移転","chapter3":"3. クラウドと Solana 監視","chapter4":"4. 収益管理と分析","chapter5":"5. RPC ノードの構築"}},"headerNav":{"home":"ホームページ","news":"ニュース"}}},"en":{"common":{"contactToTeam":"Talk with Team","privacy":"Privacy","404title":"Page not found","404body":"Sorry, we couldn't find the page you're looking for.","backToTop":"Back to top page","toc":"Table of Contents","openMenu":"Open menu","closeMenu":"Close menu","media":"Media","news":"News","books":"Books","copy":"Copy","copied":"Copied!","solvInstall":"Install solv","updateSettings":"Update settings","setupSolv":"Setup","thatsAll":"That's all!","navs":{"defaultMainNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","dao":"DAO","enterprise":"Enterprise","contact":"Contact"},"commonFooterNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","enterprise":"Enterprise","dao":"DAO","contact":"Contact","privacy":"Privacy","press-kits":"Press Kits"}},"AgreeToPolicy":{"title":"Your Choices Regarding Cookies","body":"We and our third party partners use cookies and similar technologies to process certain information, such as your IP address and digital identifiers, to analyze site usage and provide you better experiences. Please read our privacy policy for the detail.","yes":"Yes, I Accept","no":"No, I Do Not Accept"},"ContactRow":{"discord":{"title":"Community Discord","body":"If you have any inquiries, please create a support ticket in the community Discord.","button":"JOIN"},"form":{"title":"Talk with Team","body":"If you have any inquiries about development and support, please get in touch with us from here.","button":"Go"}},"CTASectionRow":{"title":"The utility tool for Solana Validators","body":"solv is an open-source tool designed to simplify the setup and operation of Solana validators and RPC nodes.","button":"Get Started","demo":"Try Demo"},"WhyOpenSourceDevelopmentRow":{"subtitle":"Why Open-Source Software?","title":"Sustainable technology development and benefits for society as a whole","description":"Open-source software (OSS) development drives technological progress in modern society and enables new value creation.","feature1":{"title":"Value as a public good","description":"Open-source software is free for anyone to use, improve, and redistribute. This makes OSS a public good for all mankind. People all over the world can enjoy its value without feeling financially constrained. As a result, innovation across society will be driven, and the equality and inclusiveness of the digital society will increase."},"feature2":{"title":"Global cooperation","description":"In the world of OSS, developers all over the world work together to improve software beyond the boundaries of regions and organizations. Each person's perspective and expertise can be incorporated into the project, enhancing its quality. OSS is truly a global gathering place of knowledge and experience that consistently produces high-quality software."},"feature3":{"title":"Preventing reinvention of the wheel","description":"OSS allows us to reuse code and prevents us from reinventing the wheel. As a result, developers can focus less on creating everything from scratch and more on solving specific problems and developing new features. This increases efficiency and enables faster higher-quality results."}},"RoadmapRow":{"2022.6":"Epics Lite Paper, TGE (Token Generate Event)","2022.7":"Epics GENESIS presale","2022.8":"Epics White Paper v1","2022.9":"Epics Alpha launch, Solana Summer Camp Hackathon 5th prize","2022.10":"Presale for IDO, WBSO (Advanced R&D) certified by the Dutch government","2022.11":"Solana Breakpoint, GitHub issue Data Oracle Collaborative Development (DIA)","2023.1":"IDO $EPCT on Orca (Solana DEX)","2023.4":"Epics DAO became a Solana Testnet Validator","2023.9":"Seed Extension Round Fundraising","2023.12":"Epics Platform Beta Launch","2024.2":"$EPCT Listed on Meteora (Solana DEX)","2024.4":"NFT Card Design Reveal, NICONICO CHOKAIGI 2024, ENASE 2024","2024.5":"Epics DAO became a Solana mainnet validator","2024.8":"NFT Card Game β Test Begins, WebX 2024","2024.10":"Series A fundraising, EPCD Exchange Launch","2025.4":"Major Release of Epics Platform, General Release of the NFT Card Game","2025.9":"Series B Fundraising","2026.4":"IEO $EPCT"},"OurWorksRow":{"WBSO":{"title":"WBSO accreditation from the Dutch government","description":"Epics DAO has received WBSO (Advanced Science and Technology Research) accreditation from the Dutch government. Epics is a social contribution blockchain game (BCG) that aims to realize a sustainable open-source development environment."},"SolanaValidator":{"title":"We operate a validator for the Solana blockchain","description":"As a validator on the Solana chain, Epics DAO is committed to ensuring the reliability and stability of the network. We will also contribute to the technical aspects of achieving Solana's fast and stable network."},"SolanaSummerCamp":{"title":"Placed 5th at Solana Summer Camp Hackathon 2022","description":"Epics DAO won 5th place out of over 18,000 entries at the Solana Summer Camp Hackathon held July 11-August 16, 2022."},"GoogleWeb3":{"title":"ELSOUL LABO has been certified by Google Web3 Startups program","description":"ELSOUL LABO's activities in the Web3 sector, including Epics DAO, and support for open-source development initiatives such as solv and Skeet, have been recognized and selected for the Google Cloud Web3 Startups program."},"ENASE2024":{"title":"Research Paper on AI & Serverless 'Skeet' Accepted for ENASE 2024","description":"The research paper 'Skeet: Towards a Lightweight Serverless Framework Supporting Modern AI-Driven App Development' has been accepted for presentation at the international conference on software engineering, ENASE 2024."},"CHOKAIGI2024":{"title":"Epics DAO Exhibits at CHOKAIGI 2024","description":"Epics DAO exhibited at CHOKAIGI 2024, held on April 27th - 28th, 2024, distributing limited edition NFTs and more. With a total attendance of 125,362 visitors, the event concluded successfully."},"WebX2024":{"title":"Epics DAO is a WebX 2024 Sponsor","description":"WebX 2024 is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact."}},"SolvTutorialYouTubeRow":{"title":"Complete Guide to Solana Validators","subtitle":"YouTube Tutorial","description":"We have released a comprehensive guide to easily start operating a Solana validator using solv. For those already running a Solana validator, you can easily switch to solv to benefit from no-downtime transitions and accelerated snapshot downloads."},"SolanaBreakpointSideEventRow":{"title":"Solana Validator Hands-On Workshop","description":"Join us to explore the realm of Solana Validators! This beginner-friendly workshop allows you to launch a Solana Validator using Latitude's cloud servers. Validators process transactions and secure the network, earning rewards. You'll get hands-on experience, unraveling the operational essence of validators while enjoying event-exclusive free credits. It's a chance to learn, interact, and dive into the incentivized world of Solana Validators. Looking forward to engaging in discussions. See you there!","link":"Event Detail"},"LatitudeCouponRow":{"subtitle":"Try it now on Bare Metal Cloud","title":"Latitude Trial Credit Coupon","description":"Through our partnership with Latitude, we are now able to offer a $100 credit coupon. By utilizing this coupon, you can actually try out launching a Solana validator with solv at hand right now.","register":"Register Coupon","couponCode":"Coupon Code"},"StakeForOpenSourceRow":{"subtitle":"Stake for the future of Open-Source Development","title":"Let's support Open-Source Development while earning staking rewards.","description":"※ These are not intended for investment advice. The information are based on the situation at the time of writing. Please check for the most current information. Always NFA/DYOR.","feature1":{"title":"Solana Mainnet Validator","description":"Epics DAO operates a Solana mainnet validator with a 0% fee for users who stake their SOL tokens, resulting in a stake reward with an annual percentage rate (APR) of 7.58% as of May 16, 2024. To contribute to the decentralization of the Solana network and enable innovation worldwide, we will focus our operations in areas with fewer nodes and data centers.","button":"Go to Validator Detail"},"feature2":{"title":"Buidlers Collective (BDLC) NFT","description":"When you stake BDLC NFTs on the Epics platform, you can earn $EPCT token rewards. Additionally, an equivalent amount of $EPCT is donated to the open-source project where the NFTs are staked, to be used for future development. This initiative utilizes blockchain technology to enable socially beneficial NFT staking and No Loss Donation, where staking rewards are donated without losing the principal.","button":"Go to NFT Marketplace"}},"NicoNicoChoKaigi2024Row":{"subtitle":"Cho Dice Roll in NICONICO CHOKAIGI 2024","title":"Thank you for visiting!","description":"Epics DAO participated in Nico Nico Chokaigi 2024, held at Makuhari Messe on April 27th and 28th, and distributed limited edition NFTs to visitors. The event attracted a total of 125,362 attendees, with about 3,000 people visiting the Epics DAO Cho Dice Roll booth, successfully concluding the event with great fanfare."},"WebX2024Row":{"title":"WebX 2024 Sponsor Confirmed","description":"Epics DAO will participate as a sponsor at WebX 2024. WebX is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact.","discountLink":"Sponsor Discount Tickets"}},"doc":{"title":"solv Document","body":"Open-Source Solana Validator Utility Tool","previousPage":"Previous page","nextPage":"Next page","actions":{"motivation":{"title":"Motivation","body":"We believe it to be beneficial for all Solana validators, as well as the Solana community and the open-source development community, and have released it as open-source accordingly."},"quickstart":{"title":"Quickstart","body":"Learn to use solv in three easy steps! This guide quickly introduces you to the essentials of the solv."},"tutorial":{"title":"Tutorial","body":"A guide to actually starting the operation of a Solana validator using solv."},"update":{"title":"No Downtime Update","body":"Explains how to migrate validator nodes without downtime. It's effective for daily updates as well as moving operations."}},"menuNav":{"home":"Docs Home","general":{"groupTitle":"General","motivation":"Motivation","quickstart":"Quickstart"},"quickstart":{"groupTitle":"Quickstart","start-solv":"Start solv","solv-mev-mode":"solv MEV Mode","no-downtime-update":"No Downtime Update"},"tutorial":{"groupTitle":"Tutorial","chapter1":"1. Solana Setup","chapter2":"2. Backup & Migrate","chapter3":"3. Cloud & Monitor","chapter4":"4. Revenue Analysis","chapter5":"5. Setup RPC Node"}},"headerNav":{"home":"solv Home","news":"News"}}}},"initialLocale":"ja","ns":["common","doc"],"userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ja"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ja"]}}}}},"__N_SSG":true}