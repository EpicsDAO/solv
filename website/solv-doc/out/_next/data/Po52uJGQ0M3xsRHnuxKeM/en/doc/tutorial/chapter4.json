{"pageProps":{"article":{"title":"Chapter 4: üìäüî• Utilizing Firestore and Google Spreadsheets for Revenue Management ‚Äî A Guide to Efficient Data Tracking and Analysis üìà","description":"In this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets.","content":"\nIn this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets. We cover the entire process from data collection to analysis and reporting, aiming for real-time performance tracking and faster decision-making. By combining Firestore‚Äôs powerful database capabilities with the accessibility of Google Spreadsheets, we achieve automation and optimization in revenue management. Through this chapter, you can gain not only technical knowledge but also effective data utilization methods.\n\n## üìù Creating Firestore Models\n\nAs it stands from the previous chapter, the scheduler will notify about duplicate data every time it checks. We will improve this by recording data in `Firestore` and only notifying when new data is added.\n\nWe will create two models called `Wallet` and `WalletStakeReward` as follows.\n\n`functions/skeet/src/models/walletModels.ts`\n\n```ts\nimport { Timestamp, FieldValue } from '@skeet-framework/firestore'\n\n// CollectionId: WalletPubkey\n// DocumentId: walletPubkey - e.g. LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9\n// Path: WalletPubkey\nexport const WalletPubkeyCN = 'WalletPubkey'\nexport const genWalletPubkeyPath = () => `${WalletPubkeyCN}`\nexport type WalletPubkey = {\n  id?: string\n  date: string\n  walletPubkey: string\n  totalSol: number\n  totalRewardAmount: number\n  createdAt?: Timestamp | FieldValue\n  updatedAt?: Timestamp | FieldValue\n}\n\n// CollectionId: StakeReward\n// DocumentId: epoch - e.g. 420\n// Path: StakeReward\nexport const StakeRewardCN = 'StakeReward'\nexport const genStakeRewardPath = (pubkey: string) =>\n  `${WalletPubkeyCN}/${pubkey}/${StakeRewardCN}`\nexport type StakeReward = {\n  id?: string\n  date: string\n  walletPubkey: string\n  epoch: number\n  totalRewardAmount: number\n  totalBalance: number\n  createdAt?: Timestamp | FieldValue\n  updatedAt?: Timestamp | FieldValue\n}\n```\n\n## üìå Registering Managed Addresses\n\nTDS rewards are issued monthly to the `authority` account by staking accounts, but here we will use `@skeet-framework/solana-utils` to register the address of the `authority` account. By doing so, you can collectively check the rewards for the associated stake accounts.\n\nCreate a script in the following directory to register the pubkey of the managed wallet in Firestore. You can also enter data directly from the Firebase browser, so please add the data by any preferred method.\n\n`functions/skeet/src/script/addWallet.ts`\n\n```ts\nimport { Wallet, WalletCN } from '@/models/walletModels'\nimport { add } from '@skeet-framework/firestore'\nimport { format } from '@skeet-framework/utils'\nimport admin from 'firebase-admin'\nadmin.initializeApp()\nconst db = admin.firestore()\n\nexport const addWallet = async (pubkey: string) => {\n  const walletParams: Wallet = {\n    date: format(new Date(), 'yyyy-MM-dd'),\n    pubkey,\n    totalSol: 0,\n    totalRewardAmount: 0,\n  }\n  await add<Wallet>(db, WalletCN, walletParams, pubkey)\n  console.log({ status: 'success' })\n}\n\nconst run = async () => {\n  const pubkey = 'your-authority-keypair'\n  await addWallet(pubkey)\n}\n\nrun()\n```\n\nMove to the `functions/skeet` directory and execute the script.\n\n```bash\ncd functions/skeet && npx ts-node -r tsconfig-paths/register --transpile-only src/scripts/addWallet.ts\n{ status: 'success' }\n```\n\nUpon checking Firebase's Firestore, the data has been successfully created üéâ\n\n![](https://storage.googleapis.com/epics-bucket/solv2/solv-wallet.png)\n\n## üîÑ Updating StakeMonitor\n\nLet's update `StakeMonitor` as follows.\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { schedulePublicOption } from '@/routings/options'\nimport {\n  RewardDataResponse,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} from '@skeet-framework/solana-utils'\nimport { defineSecret } from 'firebase-functions/params'\nimport { format, sendDiscord } from '@skeet-framework/utils'\nimport { add, get, query, update } from '@skeet-framework/firestore'\nimport {\n  Wallet,\n  WalletCN,\n  WalletStakeReward,\n  genWalletStakeRewardPath,\n} from '@/models/walletModels'\nimport { db } from '@/index'\n\n// Define secrets\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\nconst HELIUS_ENDPOINT = defineSecret('HELIUS_ENDPOINT')\n\nexport const stakeMonitor = onSchedule(\n  { ...schedulePublicOption, secrets: [DISCORD_WEBHOOK_URL, HELIUS_ENDPOINT] },\n  async (event) => {\n    try {\n      // Get all wallets\n      const wallets = await query<Wallet>(db, WalletCN, [\n        { field: 'pubkey', operator: '!=', value: '' },\n      ])\n\n      // If no wallet found, return\n      if (wallets.length === 0) {\n        console.log({ status: 'error', message: 'No wallet found' })\n        return\n      }\n\n      // Check if already checked\n      const lastEpoch = await getCurrentEpoch(HELIUS_ENDPOINT.value())\n      const lastReward = await get<WalletStakeReward>(\n        db,\n        genWalletStakeRewardPath(wallets[0].pubkey),\n        String(lastEpoch - 1)\n      )\n\n      // If already checked, return\n      if (lastReward) {\n        console.log({ status: 'ok', message: 'Already checked' })\n        return\n      }\n\n      // Get wallet\n      const wallet = await get<Wallet>(db, WalletCN, wallets[0].pubkey)\n      if (!wallet) {\n        console.log({ status: 'error', message: 'Wallet not found' })\n        return\n      }\n\n      // Get all stake rewards\n      for await (const wallet of wallets) {\n        const walletPubkey = wallet.pubkey\n        const result: RewardDataResponse = await getAllStakeRewardsByPubkey(\n          HELIUS_ENDPOINT.value(),\n          walletPubkey\n        )\n        const walletStakeRewardParams: WalletStakeReward = {\n          date: format(new Date(), 'yyyy-MM-dd'),\n          epoch: result.epoch,\n          totalRewardAmount: result.totalRewardAmount,\n          totalBalance: result.totalBalance,\n        }\n\n        // Add walletStakeReward\n        await add<WalletStakeReward>(\n          db,\n          genWalletStakeRewardPath(walletPubkey),\n          walletStakeRewardParams,\n          String(result.epoch)\n        )\n\n        // Update wallet totalSol and totalRewardAmount\n        await update<Wallet>(db, WalletCN, walletPubkey, {\n          totalSol: wallet.totalSol + result.totalBalance,\n          totalRewardAmount:\n            wallet.totalRewardAmount + result.totalRewardAmount,\n        })\n\n        // Generate content\n        const content = `Account: ${walletPubkey}\nEpoch: ${result.epoch}\nReward: ${result.totalRewardAmount} SOL\nTotal SOL: ${result.totalBalance} SOL\n`\n\n        // Send discord message\n        await sendDiscord(content, {\n          webhookUrl: DISCORD_WEBHOOK_URL.value(),\n          username: 'Skeet Staking Monitor',\n        })\n      }\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## üöÄ Deploy and Update the App\n\nDeploy to apply changes.\n\n```bash\nskeet deploy --function skeet:stakeMonitor\n```\n\n## ‚è≤Ô∏è Running the Scheduler\n\nSimilarly, when executed from the Scheduler:\n\n![](https://storage.googleapis.com/zenn-user-upload/8588406d71be-20231123.png)\n\n![](https://storage.googleapis.com/epics-bucket/solv2/solv-firestore-epoch.png)\n\n![](https://storage.googleapis.com/zenn-user-upload/24fe5c9f6e22-20231123.png)\n\nThe data has been successfully saved to Firestore, and a notification has been received üéâ\n\nLet's run the Scheduler again.\nSince the data is already saved in Firestore, the same notification will not be received again.\n\nNow, by registering the addresses of the wallets you want to manage in the same way,\nyou can start managing the staking rewards of multiple wallets üéâ\n\n## üìä Creating a Spreadsheet\n\nNext, let's set up synchronization of data to a `Google Spreadsheet` when new data is added.\n\nFirst, create a Google Spreadsheet using the link below, and take note of the following:\n\nSpreadsheet ID - `spreadsheetId`\nSheet Name - `sheetTitle` (here we use StakeRewards)\n\nCopy and paste the following values into the header:\n\n```bash\nDate\tAddress\tRewardAmount(SOL)\tEpoch\tPostBalance(SOL)\n```\n\nhttps://docs.google.com/spreadsheets\n\n![](https://storage.googleapis.com/zenn-user-upload/845a9fad4bae-20231123.png)\n\nThen, add your service account by clicking `Share` in the top right corner.\n\nReplace `appName` and `project-id` with the ones you have set up:\n\n```bash\n<appName>@<project-id>.iam.gserviceaccount.com\n```\n\n`appName` should match the value of app:name in `./skeet-cloud.config.json`.\n\n## üîÑ Adding Synchronization with Spreadsheets\n\nWhile you can add features to the previously created `stakeMonitor`, managing many addresses can become cumbersome due to heavy processing. Therefore, we will add the functionality by separating it into `Cloud Functions for Firebase` with a `Firestore` trigger.\n\nFirst, add the `@skeet-framework/spreadsheet-utils` package.\n\n```bash\nskeet yarn add -p @skeet-framework/spreadsheet-utils\n```\n\nUse the `skeet add method` command to add a `firestore` instance template.\n\n```bash\nskeet add method addSpreadsheet\n? Select Instance Type to add firestore\n‚úî ./functions/skeet/src/routings/firestore/addSpreadsheet.ts created üéâ\n‚úî Successfully exported to ./functions/skeet/src/index.ts üéâ\n```\n\nThen, edit `addSpreadsheet.ts` as follows.\n\n```ts\nimport { onDocumentCreated } from 'firebase-functions/v2/firestore'\nimport { firestoreDefaultOption } from '@/routings/options'\nimport { addDataToSheet } from '@skeet-framework/spreadsheet-utils'\nimport { sendDiscord } from '@skeet-framework/utils'\nimport { defineSecret } from 'firebase-functions/params'\n\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\n\nexport const addSpreadsheet = onDocumentCreated(\n  {\n    ...firestoreDefaultOption('Wallet/{pubkey}/WalletStakeReward/{epoch}'),\n    secrets: [DISCORD_WEBHOOK_URL],\n  },\n  async (event) => {\n    console.log(`addSpreadsheet triggered!`)\n    try {\n      // Define spreadsheet params\n      const spreadsheetId = '1mLN3pUee-thUfys-UfpeHvnjVmZZX_KLWxp76-49COY'\n      const sheetTitle = 'StakeRewards'\n      const walletPubkey = event.params.pubkey\n      const epoch = event.data?.get('epoch') as number\n      const totalRewardAmount = event.data?.get('totalRewardAmount') as number\n      const totalBalance = event.data?.get('totalBalance') as number\n\n      // Add data to spreadsheet\n      await addDataToSheet(spreadsheetId, sheetTitle, [\n        [\n          event.data?.get('date'),\n          walletPubkey,\n          totalRewardAmount,\n          epoch,\n          totalBalance,\n        ],\n      ])\n\n      // Generate Message Content\n      const content = `Account: ${walletPubkey}\nEpoch: ${epoch}\nReward: ${totalRewardAmount} SOL\nTotal SOL: ${totalBalance} SOL`\n\n      // Send discord message\n      await sendDiscord(content, {\n        webhookUrl: DISCORD_WEBHOOK_URL.value(),\n        username: 'Skeet Staking Monitor',\n      })\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\nMove the Discord notification from `stakeMonitor` to `addSpreadsheet`, and change it to notify when new data is added to the Google Spreadsheet.\n\n## üõ†Ô∏è Updating stakeMonitor\n\nTherefore, remove the Discord notification part from `stakeMonitor.ts` as follows.\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { schedulePublicOption } from '@/routings/options'\nimport {\n  RewardDataResponse,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} from '@skeet-framework/solana-utils'\nimport { defineSecret } from 'firebase-functions/params'\nimport { format } from '@skeet-framework/utils'\nimport { add, get, query, update } from '@skeet-framework/firestore'\nimport {\n  Wallet,\n  WalletCN,\n  WalletStakeReward,\n  genWalletStakeRewardPath,\n} from '@/models/walletModels'\nimport { db } from '@/index'\n\n// Define secrets\nconst HELIUS_ENDPOINT = defineSecret('HELIUS_ENDPOINT')\n\nexport const stakeMonitor = onSchedule(\n  { ...schedulePublicOption, secrets: [HELIUS_ENDPOINT] },\n  async (event) => {\n    try {\n      // Get all wallets\n      const wallets = await query<Wallet>(db, WalletCN, [\n        { field: 'pubkey', operator: '!=', value: '' },\n      ])\n\n      // If no wallet found, return\n      if (wallets.length === 0) {\n        console.log({ status: 'error', message: 'No wallet found' })\n        return\n      }\n\n      // Check if already checked\n      const lastEpoch = await getCurrentEpoch(HELIUS_ENDPOINT.value())\n      const lastReward = await get<WalletStakeReward>(\n        db,\n        genWalletStakeRewardPath(wallets[0].pubkey),\n        String(lastEpoch - 1)\n      )\n\n      // If already checked, return\n      if (lastReward) {\n        console.log({ status: 'ok', message: 'Already checked' })\n        return\n      }\n\n      // Get wallet\n      const wallet = await get<Wallet>(db, WalletCN, wallets[0].pubkey)\n      if (!wallet) {\n        console.log({ status: 'error', message: 'Wallet not found' })\n        return\n      }\n\n      // Get all stake rewards\n      for await (const wallet of wallets) {\n        const walletPubkey = wallet.pubkey\n        const result: RewardDataResponse = await getAllStakeRewardsByPubkey(\n          HELIUS_ENDPOINT.value(),\n          walletPubkey\n        )\n        const walletStakeRewardParams: WalletStakeReward = {\n          date: format(new Date(), 'yyyy-MM-dd'),\n          epoch: result.epoch,\n          totalRewardAmount: result.totalRewardAmount,\n          totalBalance: result.totalBalance,\n        }\n\n        // Add walletStakeReward\n        await add<WalletStakeReward>(\n          db,\n          genWalletStakeRewardPath(walletPubkey),\n          walletStakeRewardParams,\n          String(result.epoch)\n        )\n\n        // Update wallet totalSol and totalRewardAmount\n        await update<Wallet>(db, WalletCN, walletPubkey, {\n          totalSol: wallet.totalSol + result.totalBalance,\n          totalRewardAmount:\n            wallet.totalRewardAmount + result.totalRewardAmount,\n        })\n      }\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## üöÄ Deploy and Update the App\n\nLet's deploy again to update the app.\n\n```bash\nskeet deploy\n? Select Functions to deploy (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter>\nto proceed)\n  = Functions =\n ‚óØ solvMonitor\n ‚óâ stakeMonitor\n‚ùØ‚óâ addSpreadsheet\n```\n\n## ‚è≤Ô∏è Running the Scheduler\n\nOnce again, delete the records from Firestore's `WalletStakeReward`,\n\nand run the Scheduler.\n\nThe spreadsheet has been successfully updated, and\na notification has been sent to Discord üéâ\n\n![](https://storage.googleapis.com/zenn-user-upload/2bd77535a879-20231123.png)\n\nNow, notifications will only be sent during regular checks if there is new data, allowing for synchronization with the spreadsheet.\n\n## üåê Combining Load Balancer with Google Cloud Armor\n\nEnhancing Webhook Endpoints\n\nFirebase Functions are a powerful tool for quickly and efficiently building webhook endpoints, but as your project grows, there comes a need to bolster its infrastructure. This is where the introduction of a load balancer becomes key. By using a load balancer, you can significantly improve the performance and reliability of your endpoints, making them resilient to high traffic and unusual access patterns.\n\nFurthermore, integrating Google Cloud Armor greatly enhances security. Google Cloud Armor is a robust tool designed to protect against DDoS and web attacks, and when used in conjunction with a load balancer, it provides a strong defensive layer to safeguard your webhook endpoints from various threats. This ensures more stable service delivery to end-users and increases the trustworthiness of your business.\n\nWhile a simple setup may suffice in the early stages, as your project grows, considering the implementation of a load balancer and Google Cloud Armor can greatly strengthen network stability and security. This strategic approach allows you to swiftly meet the evolving needs as your business scales up, ensuring consistent delivery of high-quality services to end-users.\n\nFor instructions on how to configure a load balancer and Google Cloud Armor, please refer to the following link:\n\nhttps://skeet.dev/en/doc/skeet-firestore/initial-deploy/\n"},"articleHtml":"<p>In this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets. We cover the entire process from data collection to analysis and reporting, aiming for real-time performance tracking and faster decision-making. By combining Firestore‚Äôs powerful database capabilities with the accessibility of Google Spreadsheets, we achieve automation and optimization in revenue management. Through this chapter, you can gain not only technical knowledge but also effective data utilization methods.</p>\n<h2 id=\"-creating-firestore-models\" class=\"font-extrabold tracking-tighter break-word\">üìù Creating Firestore Models</h2>\n<p>As it stands from the previous chapter, the scheduler will notify about duplicate data every time it checks. We will improve this by recording data in <code>Firestore</code> and only notifying when new data is added.</p>\n<p>We will create two models called <code>Wallet</code> and <code>WalletStakeReward</code> as follows.</p>\n<p><code>functions/skeet/src/models/walletModels.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Timestamp</span>, <span class=\"hljs-title class_\">FieldValue</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n\n<span class=\"hljs-comment\">// CollectionId: WalletPubkey</span>\n<span class=\"hljs-comment\">// DocumentId: walletPubkey - e.g. LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9</span>\n<span class=\"hljs-comment\">// Path: WalletPubkey</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">WalletPubkeyCN</span> = <span class=\"hljs-string\">'WalletPubkey'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">genWalletPubkeyPath</span> = (<span class=\"hljs-params\"></span>) => <span class=\"hljs-string\">`<span class=\"hljs-subst\">${WalletPubkeyCN}</span>`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">WalletPubkey</span> = {\n  id?: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">walletPubkey</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">totalSol</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-built_in\">number</span>\n  createdAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n  updatedAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n}\n\n<span class=\"hljs-comment\">// CollectionId: StakeReward</span>\n<span class=\"hljs-comment\">// DocumentId: epoch - e.g. 420</span>\n<span class=\"hljs-comment\">// Path: StakeReward</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StakeRewardCN</span> = <span class=\"hljs-string\">'StakeReward'</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">genStakeRewardPath</span> = (<span class=\"hljs-params\">pubkey: <span class=\"hljs-built_in\">string</span></span>) =>\n  <span class=\"hljs-string\">`<span class=\"hljs-subst\">${WalletPubkeyCN}</span>/<span class=\"hljs-subst\">${pubkey}</span>/<span class=\"hljs-subst\">${StakeRewardCN}</span>`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">StakeReward</span> = {\n  id?: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">date</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">walletPubkey</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">epoch</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">totalBalance</span>: <span class=\"hljs-built_in\">number</span>\n  createdAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n  updatedAt?: <span class=\"hljs-title class_\">Timestamp</span> | <span class=\"hljs-title class_\">FieldValue</span>\n}\n</code></pre>\n<h2 id=\"-registering-managed-addresses\" class=\"font-extrabold tracking-tighter break-word\">üìå Registering Managed Addresses</h2>\n<p>TDS rewards are issued monthly to the <code>authority</code> account by staking accounts, but here we will use <code>@skeet-framework/solana-utils</code> to register the address of the <code>authority</code> account. By doing so, you can collectively check the rewards for the associated stake accounts.</p>\n<p>Create a script in the following directory to register the pubkey of the managed wallet in Firestore. You can also enter data directly from the Firebase browser, so please add the data by any preferred method.</p>\n<p><code>functions/skeet/src/script/addWallet.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Wallet</span>, <span class=\"hljs-title class_\">WalletCN</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { add } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> { format } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> admin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-admin'</span>\nadmin.<span class=\"hljs-title function_\">initializeApp</span>()\n<span class=\"hljs-keyword\">const</span> db = admin.<span class=\"hljs-title function_\">firestore</span>()\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addWallet</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\">pubkey: <span class=\"hljs-built_in\">string</span></span>) => {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletParams</span>: <span class=\"hljs-title class_\">Wallet</span> = {\n    <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n    pubkey,\n    <span class=\"hljs-attr\">totalSol</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">totalRewardAmount</span>: <span class=\"hljs-number\">0</span>,\n  }\n  <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletParams, pubkey)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">run</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) => {\n  <span class=\"hljs-keyword\">const</span> pubkey = <span class=\"hljs-string\">'your-authority-keypair'</span>\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">addWallet</span>(pubkey)\n}\n\n<span class=\"hljs-title function_\">run</span>()\n</code></pre>\n<p>Move to the <code>functions/skeet</code> directory and execute the script.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-built_in\">functions</span>/skeet &#x26;&#x26; npx ts-node -r tsconfig-paths/register --transpile-only src/scripts/addWallet.ts\n{ status: <span class=\"hljs-string\">'success'</span> }\n</code></pre>\n<p>Upon checking Firebase's Firestore, the data has been successfully created üéâ</p>\n<p><img src=\"https://storage.googleapis.com/epics-bucket/solv2/solv-wallet.png\" alt=\"\"></p>\n<h2 id=\"-updating-stakemonitor\" class=\"font-extrabold tracking-tighter break-word\">üîÑ Updating StakeMonitor</h2>\n<p>Let's update <code>StakeMonitor</code> as follows.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { schedulePublicOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">RewardDataResponse</span>,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> { format, sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { add, get, query, update } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Wallet</span>,\n  <span class=\"hljs-title class_\">WalletCN</span>,\n  <span class=\"hljs-title class_\">WalletStakeReward</span>,\n  genWalletStakeRewardPath,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { db } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/index'</span>\n\n<span class=\"hljs-comment\">// Define secrets</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'HELIUS_ENDPOINT'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakeMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...schedulePublicOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>, <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Get all wallets</span>\n      <span class=\"hljs-keyword\">const</span> wallets = <span class=\"hljs-keyword\">await</span> query&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, [\n        { <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'pubkey'</span>, <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-string\">'!='</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">''</span> },\n      ])\n\n      <span class=\"hljs-comment\">// If no wallet found, return</span>\n      <span class=\"hljs-keyword\">if</span> (wallets.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'No wallet found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Check if already checked</span>\n      <span class=\"hljs-keyword\">const</span> lastEpoch = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCurrentEpoch</span>(<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>())\n      <span class=\"hljs-keyword\">const</span> lastReward = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n        db,\n        <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>),\n        <span class=\"hljs-title class_\">String</span>(lastEpoch - <span class=\"hljs-number\">1</span>)\n      )\n\n      <span class=\"hljs-comment\">// If already checked, return</span>\n      <span class=\"hljs-keyword\">if</span> (lastReward) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'ok'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Already checked'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get wallet</span>\n      <span class=\"hljs-keyword\">const</span> wallet = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>)\n      <span class=\"hljs-keyword\">if</span> (!wallet) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Wallet not found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get all stake rewards</span>\n      <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> wallet <span class=\"hljs-keyword\">of</span> wallets) {\n        <span class=\"hljs-keyword\">const</span> walletPubkey = wallet.<span class=\"hljs-property\">pubkey</span>\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">RewardDataResponse</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAllStakeRewardsByPubkey</span>(\n          <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>(),\n          walletPubkey\n        )\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletStakeRewardParams</span>: <span class=\"hljs-title class_\">WalletStakeReward</span> = {\n          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n          <span class=\"hljs-attr\">epoch</span>: result.<span class=\"hljs-property\">epoch</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>: result.<span class=\"hljs-property\">totalRewardAmount</span>,\n          <span class=\"hljs-attr\">totalBalance</span>: result.<span class=\"hljs-property\">totalBalance</span>,\n        }\n\n        <span class=\"hljs-comment\">// Add walletStakeReward</span>\n        <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n          db,\n          <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(walletPubkey),\n          walletStakeRewardParams,\n          <span class=\"hljs-title class_\">String</span>(result.<span class=\"hljs-property\">epoch</span>)\n        )\n\n        <span class=\"hljs-comment\">// Update wallet totalSol and totalRewardAmount</span>\n        <span class=\"hljs-keyword\">await</span> update&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletPubkey, {\n          <span class=\"hljs-attr\">totalSol</span>: wallet.<span class=\"hljs-property\">totalSol</span> + result.<span class=\"hljs-property\">totalBalance</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>:\n            wallet.<span class=\"hljs-property\">totalRewardAmount</span> + result.<span class=\"hljs-property\">totalRewardAmount</span>,\n        })\n\n        <span class=\"hljs-comment\">// Generate content</span>\n        <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Account: <span class=\"hljs-subst\">${walletPubkey}</span>\nEpoch: <span class=\"hljs-subst\">${result.epoch}</span>\nReward: <span class=\"hljs-subst\">${result.totalRewardAmount}</span> SOL\nTotal SOL: <span class=\"hljs-subst\">${result.totalBalance}</span> SOL\n`</span>\n\n        <span class=\"hljs-comment\">// Send discord message</span>\n        <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n          <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n          <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Staking Monitor'</span>,\n        })\n      }\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-deploy-and-update-the-app\" class=\"font-extrabold tracking-tighter break-word\">üöÄ Deploy and Update the App</h2>\n<p>Deploy to apply changes.</p>\n<pre><code class=\"hljs language-bash\">skeet deploy --<span class=\"hljs-keyword\">function</span> skeet:stakeMonitor\n</code></pre>\n<h2 id=\"Ô∏è-running-the-scheduler\" class=\"font-extrabold tracking-tighter break-word\">‚è≤Ô∏è Running the Scheduler</h2>\n<p>Similarly, when executed from the Scheduler:</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/8588406d71be-20231123.png\" alt=\"\"></p>\n<p><img src=\"https://storage.googleapis.com/epics-bucket/solv2/solv-firestore-epoch.png\" alt=\"\"></p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/24fe5c9f6e22-20231123.png\" alt=\"\"></p>\n<p>The data has been successfully saved to Firestore, and a notification has been received üéâ</p>\n<p>Let's run the Scheduler again.\nSince the data is already saved in Firestore, the same notification will not be received again.</p>\n<p>Now, by registering the addresses of the wallets you want to manage in the same way,\nyou can start managing the staking rewards of multiple wallets üéâ</p>\n<h2 id=\"-creating-a-spreadsheet\" class=\"font-extrabold tracking-tighter break-word\">üìä Creating a Spreadsheet</h2>\n<p>Next, let's set up synchronization of data to a <code>Google Spreadsheet</code> when new data is added.</p>\n<p>First, create a Google Spreadsheet using the link below, and take note of the following:</p>\n<p>Spreadsheet ID - <code>spreadsheetId</code>\nSheet Name - <code>sheetTitle</code> (here we use StakeRewards)</p>\n<p>Copy and paste the following values into the header:</p>\n<pre><code class=\"hljs language-bash\">Date\tAddress\tRewardAmount(SOL)\tEpoch\tPostBalance(SOL)\n</code></pre>\n<p><a href=\"https://docs.google.com/spreadsheets\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.google.com/spreadsheets</a></p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/845a9fad4bae-20231123.png\" alt=\"\"></p>\n<p>Then, add your service account by clicking <code>Share</code> in the top right corner.</p>\n<p>Replace <code>appName</code> and <code>project-id</code> with the ones you have set up:</p>\n<pre><code class=\"hljs language-bash\">&#x3C;appName>@&#x3C;project-id>.iam.gserviceaccount.com\n</code></pre>\n<p><code>appName</code> should match the value of app<div></div> in <code>./skeet-cloud.config.json</code>.</p>\n<h2 id=\"-adding-synchronization-with-spreadsheets\" class=\"font-extrabold tracking-tighter break-word\">üîÑ Adding Synchronization with Spreadsheets</h2>\n<p>While you can add features to the previously created <code>stakeMonitor</code>, managing many addresses can become cumbersome due to heavy processing. Therefore, we will add the functionality by separating it into <code>Cloud Functions for Firebase</code> with a <code>Firestore</code> trigger.</p>\n<p>First, add the <code>@skeet-framework/spreadsheet-utils</code> package.</p>\n<pre><code class=\"hljs language-bash\">skeet yarn add -p @skeet-framework/spreadsheet-utils\n</code></pre>\n<p>Use the <code>skeet add method</code> command to add a <code>firestore</code> instance template.</p>\n<pre><code class=\"hljs language-bash\">skeet add method addSpreadsheet\n? Select Instance Type to add firestore\n‚úî ./functions/skeet/src/routings/firestore/addSpreadsheet.ts created üéâ\n‚úî Successfully exported to ./functions/skeet/src/index.ts üéâ\n</code></pre>\n<p>Then, edit <code>addSpreadsheet.ts</code> as follows.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onDocumentCreated } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/firestore'</span>\n<span class=\"hljs-keyword\">import</span> { firestoreDefaultOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> { addDataToSheet } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/spreadsheet-utils'</span>\n<span class=\"hljs-keyword\">import</span> { sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> addSpreadsheet = <span class=\"hljs-title function_\">onDocumentCreated</span>(\n  {\n    ...<span class=\"hljs-title function_\">firestoreDefaultOption</span>(<span class=\"hljs-string\">'Wallet/{pubkey}/WalletStakeReward/{epoch}'</span>),\n    <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>],\n  },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`addSpreadsheet triggered!`</span>)\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Define spreadsheet params</span>\n      <span class=\"hljs-keyword\">const</span> spreadsheetId = <span class=\"hljs-string\">'1mLN3pUee-thUfys-UfpeHvnjVmZZX_KLWxp76-49COY'</span>\n      <span class=\"hljs-keyword\">const</span> sheetTitle = <span class=\"hljs-string\">'StakeRewards'</span>\n      <span class=\"hljs-keyword\">const</span> walletPubkey = event.<span class=\"hljs-property\">params</span>.<span class=\"hljs-property\">pubkey</span>\n      <span class=\"hljs-keyword\">const</span> epoch = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'epoch'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n      <span class=\"hljs-keyword\">const</span> totalRewardAmount = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'totalRewardAmount'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n      <span class=\"hljs-keyword\">const</span> totalBalance = event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'totalBalance'</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">number</span>\n\n      <span class=\"hljs-comment\">// Add data to spreadsheet</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">addDataToSheet</span>(spreadsheetId, sheetTitle, [\n        [\n          event.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">'date'</span>),\n          walletPubkey,\n          totalRewardAmount,\n          epoch,\n          totalBalance,\n        ],\n      ])\n\n      <span class=\"hljs-comment\">// Generate Message Content</span>\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Account: <span class=\"hljs-subst\">${walletPubkey}</span>\nEpoch: <span class=\"hljs-subst\">${epoch}</span>\nReward: <span class=\"hljs-subst\">${totalRewardAmount}</span> SOL\nTotal SOL: <span class=\"hljs-subst\">${totalBalance}</span> SOL`</span>\n\n      <span class=\"hljs-comment\">// Send discord message</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n        <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Staking Monitor'</span>,\n      })\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<p>Move the Discord notification from <code>stakeMonitor</code> to <code>addSpreadsheet</code>, and change it to notify when new data is added to the Google Spreadsheet.</p>\n<h2 id=\"Ô∏è-updating-stakemonitor\" class=\"font-extrabold tracking-tighter break-word\">üõ†Ô∏è Updating stakeMonitor</h2>\n<p>Therefore, remove the Discord notification part from <code>stakeMonitor.ts</code> as follows.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { schedulePublicOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">RewardDataResponse</span>,\n  getAllStakeRewardsByPubkey,\n  getCurrentEpoch,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> { format } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n<span class=\"hljs-keyword\">import</span> { add, get, query, update } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/firestore'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">Wallet</span>,\n  <span class=\"hljs-title class_\">WalletCN</span>,\n  <span class=\"hljs-title class_\">WalletStakeReward</span>,\n  genWalletStakeRewardPath,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/models/walletModels'</span>\n<span class=\"hljs-keyword\">import</span> { db } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/index'</span>\n\n<span class=\"hljs-comment\">// Define secrets</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'HELIUS_ENDPOINT'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakeMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...schedulePublicOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// Get all wallets</span>\n      <span class=\"hljs-keyword\">const</span> wallets = <span class=\"hljs-keyword\">await</span> query&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, [\n        { <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">'pubkey'</span>, <span class=\"hljs-attr\">operator</span>: <span class=\"hljs-string\">'!='</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">''</span> },\n      ])\n\n      <span class=\"hljs-comment\">// If no wallet found, return</span>\n      <span class=\"hljs-keyword\">if</span> (wallets.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'No wallet found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Check if already checked</span>\n      <span class=\"hljs-keyword\">const</span> lastEpoch = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getCurrentEpoch</span>(<span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>())\n      <span class=\"hljs-keyword\">const</span> lastReward = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n        db,\n        <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>),\n        <span class=\"hljs-title class_\">String</span>(lastEpoch - <span class=\"hljs-number\">1</span>)\n      )\n\n      <span class=\"hljs-comment\">// If already checked, return</span>\n      <span class=\"hljs-keyword\">if</span> (lastReward) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'ok'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Already checked'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get wallet</span>\n      <span class=\"hljs-keyword\">const</span> wallet = <span class=\"hljs-keyword\">await</span> get&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, wallets[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">pubkey</span>)\n      <span class=\"hljs-keyword\">if</span> (!wallet) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Wallet not found'</span> })\n        <span class=\"hljs-keyword\">return</span>\n      }\n\n      <span class=\"hljs-comment\">// Get all stake rewards</span>\n      <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> wallet <span class=\"hljs-keyword\">of</span> wallets) {\n        <span class=\"hljs-keyword\">const</span> walletPubkey = wallet.<span class=\"hljs-property\">pubkey</span>\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">RewardDataResponse</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAllStakeRewardsByPubkey</span>(\n          <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>(),\n          walletPubkey\n        )\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">walletStakeRewardParams</span>: <span class=\"hljs-title class_\">WalletStakeReward</span> = {\n          <span class=\"hljs-attr\">date</span>: <span class=\"hljs-title function_\">format</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(), <span class=\"hljs-string\">'yyyy-MM-dd'</span>),\n          <span class=\"hljs-attr\">epoch</span>: result.<span class=\"hljs-property\">epoch</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>: result.<span class=\"hljs-property\">totalRewardAmount</span>,\n          <span class=\"hljs-attr\">totalBalance</span>: result.<span class=\"hljs-property\">totalBalance</span>,\n        }\n\n        <span class=\"hljs-comment\">// Add walletStakeReward</span>\n        <span class=\"hljs-keyword\">await</span> add&#x3C;<span class=\"hljs-title class_\">WalletStakeReward</span>>(\n          db,\n          <span class=\"hljs-title function_\">genWalletStakeRewardPath</span>(walletPubkey),\n          walletStakeRewardParams,\n          <span class=\"hljs-title class_\">String</span>(result.<span class=\"hljs-property\">epoch</span>)\n        )\n\n        <span class=\"hljs-comment\">// Update wallet totalSol and totalRewardAmount</span>\n        <span class=\"hljs-keyword\">await</span> update&#x3C;<span class=\"hljs-title class_\">Wallet</span>>(db, <span class=\"hljs-title class_\">WalletCN</span>, walletPubkey, {\n          <span class=\"hljs-attr\">totalSol</span>: wallet.<span class=\"hljs-property\">totalSol</span> + result.<span class=\"hljs-property\">totalBalance</span>,\n          <span class=\"hljs-attr\">totalRewardAmount</span>:\n            wallet.<span class=\"hljs-property\">totalRewardAmount</span> + result.<span class=\"hljs-property\">totalRewardAmount</span>,\n        })\n      }\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-deploy-and-update-the-app-1\" class=\"font-extrabold tracking-tighter break-word\">üöÄ Deploy and Update the App</h2>\n<p>Let's deploy again to update the app.</p>\n<pre><code class=\"hljs language-bash\">skeet deploy\n? Select Functions to deploy (Press &#x3C;space> to <span class=\"hljs-keyword\">select</span>, &#x3C;a> to toggle all, &#x3C;i> to invert selection, and &#x3C;enter>\nto proceed)\n  = Functions =\n ‚óØ solvMonitor\n ‚óâ stakeMonitor\n‚ùØ‚óâ addSpreadsheet\n</code></pre>\n<h2 id=\"Ô∏è-running-the-scheduler-1\" class=\"font-extrabold tracking-tighter break-word\">‚è≤Ô∏è Running the Scheduler</h2>\n<p>Once again, delete the records from Firestore's <code>WalletStakeReward</code>,</p>\n<p>and run the Scheduler.</p>\n<p>The spreadsheet has been successfully updated, and\na notification has been sent to Discord üéâ</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/2bd77535a879-20231123.png\" alt=\"\"></p>\n<p>Now, notifications will only be sent during regular checks if there is new data, allowing for synchronization with the spreadsheet.</p>\n<h2 id=\"-combining-load-balancer-with-google-cloud-armor\" class=\"font-extrabold tracking-tighter break-word\">üåê Combining Load Balancer with Google Cloud Armor</h2>\n<p>Enhancing Webhook Endpoints</p>\n<p>Firebase Functions are a powerful tool for quickly and efficiently building webhook endpoints, but as your project grows, there comes a need to bolster its infrastructure. This is where the introduction of a load balancer becomes key. By using a load balancer, you can significantly improve the performance and reliability of your endpoints, making them resilient to high traffic and unusual access patterns.</p>\n<p>Furthermore, integrating Google Cloud Armor greatly enhances security. Google Cloud Armor is a robust tool designed to protect against DDoS and web attacks, and when used in conjunction with a load balancer, it provides a strong defensive layer to safeguard your webhook endpoints from various threats. This ensures more stable service delivery to end-users and increases the trustworthiness of your business.</p>\n<p>While a simple setup may suffice in the early stages, as your project grows, considering the implementation of a load balancer and Google Cloud Armor can greatly strengthen network stability and security. This strategic approach allows you to swiftly meet the evolving needs as your business scales up, ensuring consistent delivery of high-quality services to end-users.</p>\n<p>For instructions on how to configure a load balancer and Google Cloud Armor, please refer to the following link:</p>\n<p><a href=\"https://skeet.dev/en/doc/skeet-firestore/initial-deploy/\" target=\"_blank\" rel=\"noopener noreferrer\">https://skeet.dev/en/doc/skeet-firestore/initial-deploy/</a></p>","title":"Chapter 4: üìäüî• Utilizing Firestore and Google Spreadsheets for Revenue Management ‚Äî A Guide to Efficient Data Tracking and Analysis üìà | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes","seoData":[{"property":"og:title","content":"Chapter 4: üìäüî• Utilizing Firestore and Google Spreadsheets for Revenue Management ‚Äî A Guide to Efficient Data Tracking and Analysis üìà | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"twitter:title","content":"Chapter 4: üìäüî• Utilizing Firestore and Google Spreadsheets for Revenue Management ‚Äî A Guide to Efficient Data Tracking and Analysis üìà | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"twitter:text:title","content":"Chapter 4: üìäüî• Utilizing Firestore and Google Spreadsheets for Revenue Management ‚Äî A Guide to Efficient Data Tracking and Analysis üìà | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"description","content":"In this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets."},{"property":"og:description","content":"In this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets."},{"name":"twitter:description","content":"In this chapter, we will explain how to efficiently manage earnings as a Solana validator using Firebase‚Äôs Firestore and Google Spreadsheets."},{"property":"og:url","content":"https://solv.epics.dev/en/doc/tutorial/chapter4"},{"property":"og:image","content":"https://solv.epics.dev/ogp.png"},{"property":"og:image:secure","content":"https://solv.epics.dev/ogp.png"},{"name":"twitter:image","content":"https://solv.epics.dev/ogp.png"}],"_nextI18Next":{"initialI18nStore":{"en":{"common":{"contactToTeam":"Talk with Team","privacy":"Privacy","404title":"Page not found","404body":"Sorry, we couldn't find the page you're looking for.","backToTop":"Back to top page","toc":"Table of Contents","openMenu":"Open menu","closeMenu":"Close menu","media":"Media","news":"News","books":"Books","copy":"Copy","copied":"Copied!","solvInstall":"Install solv","updateSettings":"Update settings","setupSolv":"Setup","thatsAll":"That's all!","navs":{"defaultMainNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","dao":"DAO","enterprise":"Enterprise","contact":"Contact"},"commonFooterNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","enterprise":"Enterprise","dao":"DAO","contact":"Contact","privacy":"Privacy","press-kits":"Press Kits"}},"AgreeToPolicy":{"title":"Your Choices Regarding Cookies","body":"We and our third party partners use cookies and similar technologies to process certain information, such as your IP address and digital identifiers, to analyze site usage and provide you better experiences. Please read our privacy policy for the detail.","yes":"Yes, I Accept","no":"No, I Do Not Accept"},"ContactRow":{"discord":{"title":"Community Discord","body":"If you have any inquiries, please create a support ticket in the community Discord.","button":"JOIN"},"form":{"title":"Talk with Team","body":"If you have any inquiries about development and support, please get in touch with us from here.","button":"Go"}},"CTASectionRow":{"title":"The utility tool for Solana Validators","body":"solv is an open-source tool designed to simplify the setup and operation of Solana validators and RPC nodes.","button":"Get Started","demo":"Try Demo"},"WhyOpenSourceDevelopmentRow":{"subtitle":"Why Open-Source Software?","title":"Sustainable technology development and benefits for society as a whole","description":"Open-source software (OSS) development drives technological progress in modern society and enables new value creation.","feature1":{"title":"Value as a public good","description":"Open-source software is free for anyone to use, improve, and redistribute. This makes OSS a public good for all mankind. People all over the world can enjoy its value without feeling financially constrained. As a result, innovation across society will be driven, and the equality and inclusiveness of the digital society will increase."},"feature2":{"title":"Global cooperation","description":"In the world of OSS, developers all over the world work together to improve software beyond the boundaries of regions and organizations. Each person's perspective and expertise can be incorporated into the project, enhancing its quality. OSS is truly a global gathering place of knowledge and experience that consistently produces high-quality software."},"feature3":{"title":"Preventing reinvention of the wheel","description":"OSS allows us to reuse code and prevents us from reinventing the wheel. As a result, developers can focus less on creating everything from scratch and more on solving specific problems and developing new features. This increases efficiency and enables faster higher-quality results."}},"RoadmapRow":{"2022.6":"Epics Lite Paper, TGE (Token Generate Event)","2022.7":"Epics GENESIS presale","2022.8":"Epics White Paper v1","2022.9":"Epics Alpha launch, Solana Summer Camp Hackathon 5th prize","2022.10":"Presale for IDO, WBSO (Advanced R&D) certified by the Dutch government","2022.11":"Solana Breakpoint, GitHub issue Data Oracle Collaborative Development (DIA)","2023.1":"IDO $EPCT on Orca (Solana DEX)","2023.4":"Epics DAO became a Solana Testnet Validator","2023.9":"Seed Extension Round Fundraising","2023.12":"Epics Platform Beta Launch","2024.2":"$EPCT Listed on Meteora (Solana DEX)","2024.4":"NFT Card Design Reveal, NICONICO CHOKAIGI 2024, ENASE 2024","2024.5":"Epics DAO became a Solana mainnet validator","2024.8":"NFT Card Game Œ≤ Test Begins, WebX 2024","2024.10":"Series A fundraising, EPCD Exchange Launch","2025.4":"Major Release of Epics Platform, General Release of the NFT Card Game","2025.9":"Series B Fundraising","2026.4":"IEO $EPCT"},"OurWorksRow":{"WBSO":{"title":"WBSO accreditation from the Dutch government","description":"Epics DAO has received WBSO (Advanced Science and Technology Research) accreditation from the Dutch government. Epics is a social contribution blockchain game (BCG) that aims to realize a sustainable open-source development environment."},"SolanaValidator":{"title":"We operate a validator for the Solana blockchain","description":"As a validator on the Solana chain, Epics DAO is committed to ensuring the reliability and stability of the network. We will also contribute to the technical aspects of achieving Solana's fast and stable network."},"SolanaSummerCamp":{"title":"Placed 5th at Solana Summer Camp Hackathon 2022","description":"Epics DAO won 5th place out of over 18,000 entries at the Solana Summer Camp Hackathon held July 11-August 16, 2022."},"GoogleWeb3":{"title":"ELSOUL LABO has been certified by Google Web3 Startups program","description":"ELSOUL LABO's activities in the Web3 sector, including Epics DAO, and support for open-source development initiatives such as solv and Skeet, have been recognized and selected for the Google Cloud Web3 Startups program."},"ENASE2024":{"title":"Research Paper on AI & Serverless 'Skeet' Accepted for ENASE 2024","description":"The research paper 'Skeet: Towards a Lightweight Serverless Framework Supporting Modern AI-Driven App Development' has been accepted for presentation at the international conference on software engineering, ENASE 2024."},"CHOKAIGI2024":{"title":"Epics DAO Exhibits at CHOKAIGI 2024","description":"Epics DAO exhibited at CHOKAIGI 2024, held on April 27th - 28th, 2024, distributing limited edition NFTs and more. With a total attendance of 125,362 visitors, the event concluded successfully."},"WebX2024":{"title":"Epics DAO is a WebX 2024 Sponsor","description":"WebX 2024 is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact."}},"SolvTutorialYouTubeRow":{"title":"Complete Guide to Solana Validators","subtitle":"YouTube Tutorial","description":"We have released a comprehensive guide to easily start operating a Solana validator using solv. For those already running a Solana validator, you can easily switch to solv to benefit from no-downtime transitions and accelerated snapshot downloads."},"SolanaBreakpointSideEventRow":{"title":"Solana Validator Hands-On Workshop","description":"Join us to explore the realm of Solana Validators! This beginner-friendly workshop allows you to launch a Solana Validator using Latitude's cloud servers. Validators process transactions and secure the network, earning rewards. You'll get hands-on experience, unraveling the operational essence of validators while enjoying event-exclusive free credits. It's a chance to learn, interact, and dive into the incentivized world of Solana Validators. Looking forward to engaging in discussions. See you there!","link":"Event Detail"},"LatitudeCouponRow":{"subtitle":"Try it now on Bare Metal Cloud","title":"Latitude Trial Credit Coupon","description":"Through our partnership with Latitude, we are now able to offer a $100 credit coupon. By utilizing this coupon, you can actually try out launching a Solana validator with solv at hand right now.","register":"Register Coupon","couponCode":"Coupon Code"},"StakeForOpenSourceRow":{"subtitle":"Stake for the future of Open-Source Development","title":"Let's support Open-Source Development while earning staking rewards.","description":"‚Äª These are not intended for investment advice. The information are based on the situation at the time of writing. Please check for the most current information. Always NFA/DYOR.","feature1":{"title":"Solana Mainnet Validator","description":"Epics DAO operates a Solana mainnet validator with a 0% fee for users who stake their SOL tokens, resulting in a stake reward with an annual percentage rate (APR) of 7.58% as of May 16, 2024. To contribute to the decentralization of the Solana network and enable innovation worldwide, we will focus our operations in areas with fewer nodes and data centers.","button":"Go to Validator Detail"},"feature2":{"title":"Buidlers Collective (BDLC) NFT","description":"When you stake BDLC NFTs on the Epics platform, you can earn $EPCT token rewards. Additionally, an equivalent amount of $EPCT is donated to the open-source project where the NFTs are staked, to be used for future development. This initiative utilizes blockchain technology to enable socially beneficial NFT staking and No Loss Donation, where staking rewards are donated without losing the principal.","button":"Go to NFT Marketplace"}},"NicoNicoChoKaigi2024Row":{"subtitle":"Cho Dice Roll in NICONICO CHOKAIGI 2024","title":"Thank you for visiting!","description":"Epics DAO participated in Nico Nico Chokaigi 2024, held at Makuhari Messe on April 27th and 28th, and distributed limited edition NFTs to visitors. The event attracted a total of 125,362 attendees, with about 3,000 people visiting the Epics DAO Cho Dice Roll booth, successfully concluding the event with great fanfare."},"WebX2024Row":{"title":"WebX 2024 Sponsor Confirmed","description":"Epics DAO will participate as a sponsor at WebX 2024. WebX is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact.","discountLink":"Sponsor Discount Tickets"}},"doc":{"title":"solv Document","body":"Open-Source Solana Validator Utility Tool","previousPage":"Previous page","nextPage":"Next page","actions":{"motivation":{"title":"Motivation","body":"We believe it to be beneficial for all Solana validators, as well as the Solana community and the open-source development community, and have released it as open-source accordingly."},"quickstart":{"title":"Quickstart","body":"Learn to use solv in three easy steps! This guide quickly introduces you to the essentials of the solv."},"tutorial":{"title":"Tutorial","body":"A guide to actually starting the operation of a Solana validator using solv."},"update":{"title":"No Downtime Update","body":"Explains how to migrate validator nodes without downtime. It's effective for daily updates as well as moving operations."}},"menuNav":{"home":"Docs Home","general":{"groupTitle":"General","motivation":"Motivation","quickstart":"Quickstart"},"quickstart":{"groupTitle":"Quickstart","start-solv":"Start solv","solv-mev-mode":"solv MEV Mode","no-downtime-update":"No Downtime Update"},"tutorial":{"groupTitle":"Tutorial","chapter1":"1. Solana Setup","chapter2":"2. Backup & Migrate","chapter3":"3. Cloud & Monitor","chapter4":"4. Revenue Analysis","chapter5":"5. Setup RPC Node"}},"headerNav":{"home":"solv Home","news":"News"}}}},"initialLocale":"en","ns":["common","doc"],"userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ja"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ja"]}}}}},"__N_SSG":true}