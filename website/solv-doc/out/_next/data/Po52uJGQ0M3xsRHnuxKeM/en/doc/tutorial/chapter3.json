{"pageProps":{"article":{"title":"Chapter 3: 🌐💰 The Full Scope of Cloud Utilization: Efficient Monitoring of Solana Validators and Management of Staking Rewards 🚀","description":"In this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud.","content":"\nIn this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud. We aim to implement within the free tier of Firebase Functions using an innovative serverless framework called Skeet Framework. This framework allows us to optimize resources while making it easier and more cost-effective to monitor validator performance and track rewards. As we progress through the chapter, we will explain in detail how to implement these critical processes using Firebase and Skeet Framework, including practical examples.\n\nThis chapter utilizes Cloud Functions for Firebase and the serverless framework Skeet.\n\n## 🚀 Deploying Firebase Functions\n\nFirst, deploy `Cloud Functions for Firebase`.\nPlease refer to the following section for setting up this development environment and deployment.\n\nhttps://link.medium.com/Jvrjbv2uZEb\n\n## 📩 Obtaining Discord Webhook URL\n\nRight-click on the channel where you want to receive notifications and create a Webhook.\nThen, make a note of the Webhook URL.\n\n![](https://storage.googleapis.com/zenn-user-upload/da936f953ead-20231122.png)\n\n## 🛰️ Adding an Endpoint for Validator Monitoring\n\nIn the root directory of your `skeet framework`, execute the `skeet add method` command.\n\nSince you want to perform a periodic execution, select `schedule`.\n\n```bash\nskeet add method solvMonitor\n? Select Instance Type to add\n   = Instance Type =\n  http\n  firestore\n  pubsub\n❯ schedule\n  auth\n✔ ./functions/skeet/src/routings/schedule/solvMonitor.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n```\n\nA template for `Cloud Functions for Firebase` named `solvMonitor` has been created.\n\n`solvMonitor.ts`\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { scheduleDefaultOption } from '@/routings/options'\n\nexport const solvMonitor = onSchedule(scheduleDefaultOption, async (event) => {\n  try {\n    console.log({ status: 'success' })\n  } catch (error) {\n    console.log({ status: 'error', message: String(error) })\n  }\n})\n```\n\n## 🧠 Adding Logic for Validator Monitoring\n\nFirst, add the necessary npm package.\n\n```bash\nskeet yarn add -p @skeet-framework/solana-utils\n? Select Services to run yarn command (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)\n  = Services =\n❯◯ skeet\n```\n\nSelect the functions directory to add by pressing the space key.\n\nNext, add the Discord Webhook URL you obtained earlier to the Secret Manager.\n\n```bash\nskeet add secret DISCORD_WEBHOOK_URL\n? Enter a value for DISCORD_WEBHOOK_URL [hidden]\n✔  Created a new secret version projects/1012380258xx/secrets/DISCORD_WEBHOOK_URL/versions/1\n```\n\nThen, update `solvMonitor` as follows.\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { scheduleDefaultOption } from '@/routings/options'\nimport { defineSecret } from 'firebase-functions/params'\nimport {\n  ValidatorStatusParams,\n  isValidatorActive,\n} from '@skeet-framework/solana-utils'\nimport { sendDiscord } from '@skeet-framework/utils'\n\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\n\nexport const solvMonitor = onSchedule(\n  { ...scheduleDefaultOption, secrets: [DISCORD_WEBHOOK_URL] },\n  async (event) => {\n    try {\n      const endpoint = 'https://api.testnet.solana.com'\n      const voteAccountPubkey = '<your-vote-account-pubkey>'\n      const result: ValidatorStatusParams = await isValidatorActive(\n        endpoint,\n        voteAccountPubkey\n      )\n      const content = `Validator: ${voteAccountPubkey}\\nStatus${\n        result.isActive ? 'active' : 'inactive'\n      }\\nMessage: ${result.reason}`\n      await sendDiscord(content, {\n        webhookUrl: DISCORD_WEBHOOK_URL.value(),\n        username: 'Skeet Solana Monitor',\n      })\n      console.log({ result })\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\nAdd the logic for validator monitoring as shown above.\n\n## 🚀 Deploying Logic for Validator Monitoring\n\nDeploy your monitoring app using the `skeet deploy` command.\n\n```bash\n? Select Functions to deploy (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)\n  = Functions =\n ◯ root\n❯◉ solvMonitor\n```\n\nSelect `solvMonitor` and deploy it to `Cloud Functions for Firebase`.\n\nNext, execute it from the following `Cloud Scheduler` console:\n\nhttps://console.cloud.google.com/cloudscheduler\n\nYou can test it by clicking `Force run` from the `Actions` on the right.\n\n![](https://storage.googleapis.com/zenn-user-upload/b7e5b17d4be5-20231122.png)\n\nIf it succeeds, you will see:\n\n![](https://storage.googleapis.com/zenn-user-upload/5125848e30dd-20231122.png)\n\nA notification will be sent to Discord 🎉\n\n## ⏲️ Setting Scheduled Execution Time\n\nBy default, the configuration options are defined in the following directory:\n\n`functions/skeet/src/routings/options/scheduleOptions.ts`\n\n```ts\nimport { ScheduleOptions } from 'firebase-functions/v2/scheduler'\nimport skeetOptions from '../../../skeetOptions.json'\n\nconst appName = skeetOptions.name\nconst project = skeetOptions.projectId\nconst region = skeetOptions.region\nconst serviceAccount = `${appName}@${project}.iam.gserviceaccount.com`\nconst vpcConnector = `${appName}-con`\n\nexport const scheduleDefaultOption: ScheduleOptions = {\n  region,\n  schedule: 'every 1 hours',\n  timeZone: 'UTC',\n  retryCount: 3,\n  maxRetrySeconds: 60,\n  minBackoffSeconds: 1,\n  maxBackoffSeconds: 10,\n  serviceAccount,\n  timeoutSeconds: 540,\n  labels: {\n    skeet: 'schedule',\n  },\n}\n```\n\nBy default, it is set to execute every hour. Please change the value of `schedule` to your desired setting.\n\nFor more details on schedule settings:\n\nhttps://cloud.google.com/scheduler/docs/configuring/cron-job-schedules\n\n## 🌐 Adding an Endpoint for Staking Rewards Monitoring\n\nSimilarly, we are now adding a new feature for checking staking rewards.\n\n```bash\nskeet add method stakeMonitor\n? Select Instance Type to add\n   = Instance Type =\n  http\n  firestore\n  pubsub\n❯ schedule\n  auth\n✔ ./functions/skeet/src/routings/schedule/stakeMonitor.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n```\n\nA template for `Cloud Functions for Firebase` named `stakingMonitor` has been created.\n\n`stakingMonitor.ts`\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { scheduleDefaultOption } from '@/routings/options'\n\nexport const stakingMonitor = onSchedule(\n  scheduleDefaultOption,\n  async (event) => {\n    try {\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## 🔗 About Solana's RPC Endpoints\n\nThe official Solana RPC endpoint `https://api.mainnet-beta.solana.com` has rate limits, so using a private RPC is recommended for more stable data access. To this end, we introduce the use of Helius's RPC service and how to securely store its endpoint information in a secret manager.\n\nhttps://www.helius.dev/\n\nUse the following command to register the Helius RPC endpoint with the secret manager:\n\n```bash\nskeet add secret HELIUS_ENDPOINT\n? Enter a value for HELIUS_ENDPOINT [hidden]\n```\n\nBy following this procedure, your application will be able to access the Solana network more efficiently through Helius's private RPC, obtaining stable data without being affected by rate limits.\n\n## 💡 Adding Logic for Staking Reward Monitoring\n\nUpdate `stakingMonitor` as follows:\n\n```ts\nimport { onSchedule } from 'firebase-functions/v2/scheduler'\nimport { schedulePublicOption } from '@/routings/options'\nimport {\n  RewardDataResponse,\n  getAllStakeRewardsByPubkey,\n} from '@skeet-framework/solana-utils'\nimport { defineSecret } from 'firebase-functions/params'\nimport { sendDiscord } from '@skeet-framework/utils'\n\nconst DISCORD_WEBHOOK_URL = defineSecret('DISCORD_WEBHOOK_URL')\nconst HELIUS_ENDPOINT = defineSecret('HELIUS_ENDPOINT')\n\nexport const stakeMonitor = onSchedule(\n  { ...schedulePublicOption, secrets: [DISCORD_WEBHOOK_URL, HELIUS_ENDPOINT] },\n  async (event) => {\n    try {\n      const walletPubkey = 'LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9'\n      const result: RewardDataResponse = await getAllStakeRewardsByPubkey(\n        HELIUS_ENDPOINT.value(),\n        walletPubkey\n      )\n      const content = `Account: ${walletPubkey}\nEpoch: ${result.epoch}\nReward: ${result.totalRewardAmount} SOL\nTotal SOL: ${result.totalBalance} SOL\n`\n      await sendDiscord(content, {\n        webhookUrl: DISCORD_WEBHOOK_URL.value(),\n        username: 'Skeet Staking Monitor',\n      })\n      console.log({ status: 'success' })\n    } catch (error) {\n      console.log({ status: 'error', message: String(error) })\n    }\n  }\n)\n```\n\n## 📤 Deploying Logic for Staking Rewards Monitoring\n\nSimilarly, deploy the monitoring app using the `skeet deploy` command.\n\n```bash\nskeet deploy --function skeet:stakeMonitor\n```\n\nYou can also specify which functions to deploy by using the `--function` option.\n\nLikewise, let's try executing it from Cloud Scheduler.\n\n![](https://storage.googleapis.com/zenn-user-upload/446a191fdf48-20231123.png)\n\nThe notification has been successfully received 🎉\n\n![](https://storage.googleapis.com/zenn-user-upload/7ba0331573c5-20231123.png)\n\nIn the next chapter, we will manage data more conveniently using `Firestore` and `Google Sheets`.\n"},"articleHtml":"<p>In this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud. We aim to implement within the free tier of Firebase Functions using an innovative serverless framework called Skeet Framework. This framework allows us to optimize resources while making it easier and more cost-effective to monitor validator performance and track rewards. As we progress through the chapter, we will explain in detail how to implement these critical processes using Firebase and Skeet Framework, including practical examples.</p>\n<p>This chapter utilizes Cloud Functions for Firebase and the serverless framework Skeet.</p>\n<h2 id=\"-deploying-firebase-functions\" class=\"font-extrabold tracking-tighter break-word\">🚀 Deploying Firebase Functions</h2>\n<p>First, deploy <code>Cloud Functions for Firebase</code>.\nPlease refer to the following section for setting up this development environment and deployment.</p>\n<p><a href=\"https://link.medium.com/Jvrjbv2uZEb\" target=\"_blank\" rel=\"noopener noreferrer\">https://link.medium.com/Jvrjbv2uZEb</a></p>\n<h2 id=\"-obtaining-discord-webhook-url\" class=\"font-extrabold tracking-tighter break-word\">📩 Obtaining Discord Webhook URL</h2>\n<p>Right-click on the channel where you want to receive notifications and create a Webhook.\nThen, make a note of the Webhook URL.</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/da936f953ead-20231122.png\" alt=\"\"></p>\n<h2 id=\"️-adding-an-endpoint-for-validator-monitoring\" class=\"font-extrabold tracking-tighter break-word\">🛰️ Adding an Endpoint for Validator Monitoring</h2>\n<p>In the root directory of your <code>skeet framework</code>, execute the <code>skeet add method</code> command.</p>\n<p>Since you want to perform a periodic execution, select <code>schedule</code>.</p>\n<pre><code class=\"hljs language-bash\">skeet add method solvMonitor\n? Select Instance Type to add\n   = Instance Type =\n  http\n  firestore\n  pubsub\n❯ schedule\n  auth\n✔ ./functions/skeet/src/routings/schedule/solvMonitor.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n</code></pre>\n<p>A template for <code>Cloud Functions for Firebase</code> named <code>solvMonitor</code> has been created.</p>\n<p><code>solvMonitor.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { scheduleDefaultOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> solvMonitor = <span class=\"hljs-title function_\">onSchedule</span>(scheduleDefaultOption, <span class=\"hljs-keyword\">async</span> (event) => {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n  }\n})\n</code></pre>\n<h2 id=\"-adding-logic-for-validator-monitoring\" class=\"font-extrabold tracking-tighter break-word\">🧠 Adding Logic for Validator Monitoring</h2>\n<p>First, add the necessary npm package.</p>\n<pre><code class=\"hljs language-bash\">skeet yarn add -p @skeet-framework/solana-utils\n? Select Services to run yarn <span class=\"hljs-built_in\">command</span> (Press &#x3C;space> to <span class=\"hljs-keyword\">select</span>, &#x3C;a> to toggle all, &#x3C;i> to invert selection, and &#x3C;enter> to proceed)\n  = Services =\n❯◯ skeet\n</code></pre>\n<p>Select the functions directory to add by pressing the space key.</p>\n<p>Next, add the Discord Webhook URL you obtained earlier to the Secret Manager.</p>\n<pre><code class=\"hljs language-bash\">skeet add secret DISCORD_WEBHOOK_URL\n? Enter a value <span class=\"hljs-keyword\">for</span> DISCORD_WEBHOOK_URL [hidden]\n✔  Created a new secret version projects/1012380258xx/secrets/DISCORD_WEBHOOK_URL/versions/1\n</code></pre>\n<p>Then, update <code>solvMonitor</code> as follows.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { scheduleDefaultOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">ValidatorStatusParams</span>,\n  isValidatorActive,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> solvMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...scheduleDefaultOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> endpoint = <span class=\"hljs-string\">'https://api.testnet.solana.com'</span>\n      <span class=\"hljs-keyword\">const</span> voteAccountPubkey = <span class=\"hljs-string\">'&#x3C;your-vote-account-pubkey>'</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">ValidatorStatusParams</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">isValidatorActive</span>(\n        endpoint,\n        voteAccountPubkey\n      )\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Validator: <span class=\"hljs-subst\">${voteAccountPubkey}</span>\\nStatus<span class=\"hljs-subst\">${\n        result.isActive ? <span class=\"hljs-string\">'active'</span> : <span class=\"hljs-string\">'inactive'</span>\n      }</span>\\nMessage: <span class=\"hljs-subst\">${result.reason}</span>`</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n        <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Solana Monitor'</span>,\n      })\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ result })\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<p>Add the logic for validator monitoring as shown above.</p>\n<h2 id=\"-deploying-logic-for-validator-monitoring\" class=\"font-extrabold tracking-tighter break-word\">🚀 Deploying Logic for Validator Monitoring</h2>\n<p>Deploy your monitoring app using the <code>skeet deploy</code> command.</p>\n<pre><code class=\"hljs language-bash\">? Select Functions to deploy (Press &#x3C;space> to <span class=\"hljs-keyword\">select</span>, &#x3C;a> to toggle all, &#x3C;i> to invert selection, and &#x3C;enter> to proceed)\n  = Functions =\n ◯ root\n❯◉ solvMonitor\n</code></pre>\n<p>Select <code>solvMonitor</code> and deploy it to <code>Cloud Functions for Firebase</code>.</p>\n<p>Next, execute it from the following <code>Cloud Scheduler</code> console:</p>\n<p><a href=\"https://console.cloud.google.com/cloudscheduler\" target=\"_blank\" rel=\"noopener noreferrer\">https://console.cloud.google.com/cloudscheduler</a></p>\n<p>You can test it by clicking <code>Force run</code> from the <code>Actions</code> on the right.</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/b7e5b17d4be5-20231122.png\" alt=\"\"></p>\n<p>If it succeeds, you will see:</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/5125848e30dd-20231122.png\" alt=\"\"></p>\n<p>A notification will be sent to Discord 🎉</p>\n<h2 id=\"️-setting-scheduled-execution-time\" class=\"font-extrabold tracking-tighter break-word\">⏲️ Setting Scheduled Execution Time</h2>\n<p>By default, the configuration options are defined in the following directory:</p>\n<p><code>functions/skeet/src/routings/options/scheduleOptions.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ScheduleOptions</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> skeetOptions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../../skeetOptions.json'</span>\n\n<span class=\"hljs-keyword\">const</span> appName = skeetOptions.<span class=\"hljs-property\">name</span>\n<span class=\"hljs-keyword\">const</span> project = skeetOptions.<span class=\"hljs-property\">projectId</span>\n<span class=\"hljs-keyword\">const</span> region = skeetOptions.<span class=\"hljs-property\">region</span>\n<span class=\"hljs-keyword\">const</span> serviceAccount = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${appName}</span>@<span class=\"hljs-subst\">${project}</span>.iam.gserviceaccount.com`</span>\n<span class=\"hljs-keyword\">const</span> vpcConnector = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${appName}</span>-con`</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">scheduleDefaultOption</span>: <span class=\"hljs-title class_\">ScheduleOptions</span> = {\n  region,\n  <span class=\"hljs-attr\">schedule</span>: <span class=\"hljs-string\">'every 1 hours'</span>,\n  <span class=\"hljs-attr\">timeZone</span>: <span class=\"hljs-string\">'UTC'</span>,\n  <span class=\"hljs-attr\">retryCount</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-attr\">maxRetrySeconds</span>: <span class=\"hljs-number\">60</span>,\n  <span class=\"hljs-attr\">minBackoffSeconds</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">maxBackoffSeconds</span>: <span class=\"hljs-number\">10</span>,\n  serviceAccount,\n  <span class=\"hljs-attr\">timeoutSeconds</span>: <span class=\"hljs-number\">540</span>,\n  <span class=\"hljs-attr\">labels</span>: {\n    <span class=\"hljs-attr\">skeet</span>: <span class=\"hljs-string\">'schedule'</span>,\n  },\n}\n</code></pre>\n<p>By default, it is set to execute every hour. Please change the value of <code>schedule</code> to your desired setting.</p>\n<p>For more details on schedule settings:</p>\n<p><a href=\"https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules\" target=\"_blank\" rel=\"noopener noreferrer\">https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules</a></p>\n<h2 id=\"-adding-an-endpoint-for-staking-rewards-monitoring\" class=\"font-extrabold tracking-tighter break-word\">🌐 Adding an Endpoint for Staking Rewards Monitoring</h2>\n<p>Similarly, we are now adding a new feature for checking staking rewards.</p>\n<pre><code class=\"hljs language-bash\">skeet add method stakeMonitor\n? Select Instance Type to add\n   = Instance Type =\n  http\n  firestore\n  pubsub\n❯ schedule\n  auth\n✔ ./functions/skeet/src/routings/schedule/stakeMonitor.ts created 🎉\n✔ Successfully exported to ./functions/skeet/src/index.ts 🎉\n</code></pre>\n<p>A template for <code>Cloud Functions for Firebase</code> named <code>stakingMonitor</code> has been created.</p>\n<p><code>stakingMonitor.ts</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { scheduleDefaultOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakingMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  scheduleDefaultOption,\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-about-solanas-rpc-endpoints\" class=\"font-extrabold tracking-tighter break-word\">🔗 About Solana's RPC Endpoints</h2>\n<p>The official Solana RPC endpoint <code>https://api.mainnet-beta.solana.com</code> has rate limits, so using a private RPC is recommended for more stable data access. To this end, we introduce the use of Helius's RPC service and how to securely store its endpoint information in a secret manager.</p>\n<p><a href=\"https://www.helius.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.helius.dev/</a></p>\n<p>Use the following command to register the Helius RPC endpoint with the secret manager:</p>\n<pre><code class=\"hljs language-bash\">skeet add secret HELIUS_ENDPOINT\n? Enter a value <span class=\"hljs-keyword\">for</span> HELIUS_ENDPOINT [hidden]\n</code></pre>\n<p>By following this procedure, your application will be able to access the Solana network more efficiently through Helius's private RPC, obtaining stable data without being affected by rate limits.</p>\n<h2 id=\"-adding-logic-for-staking-reward-monitoring\" class=\"font-extrabold tracking-tighter break-word\">💡 Adding Logic for Staking Reward Monitoring</h2>\n<p>Update <code>stakingMonitor</code> as follows:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { onSchedule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/v2/scheduler'</span>\n<span class=\"hljs-keyword\">import</span> { schedulePublicOption } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/routings/options'</span>\n<span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">RewardDataResponse</span>,\n  getAllStakeRewardsByPubkey,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/solana-utils'</span>\n<span class=\"hljs-keyword\">import</span> { defineSecret } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'firebase-functions/params'</span>\n<span class=\"hljs-keyword\">import</span> { sendDiscord } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@skeet-framework/utils'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'DISCORD_WEBHOOK_URL'</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span> = <span class=\"hljs-title function_\">defineSecret</span>(<span class=\"hljs-string\">'HELIUS_ENDPOINT'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stakeMonitor = <span class=\"hljs-title function_\">onSchedule</span>(\n  { ...schedulePublicOption, <span class=\"hljs-attr\">secrets</span>: [<span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>, <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>] },\n  <span class=\"hljs-keyword\">async</span> (event) => {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> walletPubkey = <span class=\"hljs-string\">'LKnGHsjr7UYBXnzfbrz4k6QotCz56rMQTSiVwdRSyL9'</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">result</span>: <span class=\"hljs-title class_\">RewardDataResponse</span> = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">getAllStakeRewardsByPubkey</span>(\n        <span class=\"hljs-variable constant_\">HELIUS_ENDPOINT</span>.<span class=\"hljs-title function_\">value</span>(),\n        walletPubkey\n      )\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`Account: <span class=\"hljs-subst\">${walletPubkey}</span>\nEpoch: <span class=\"hljs-subst\">${result.epoch}</span>\nReward: <span class=\"hljs-subst\">${result.totalRewardAmount}</span> SOL\nTotal SOL: <span class=\"hljs-subst\">${result.totalBalance}</span> SOL\n`</span>\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sendDiscord</span>(content, {\n        <span class=\"hljs-attr\">webhookUrl</span>: <span class=\"hljs-variable constant_\">DISCORD_WEBHOOK_URL</span>.<span class=\"hljs-title function_\">value</span>(),\n        <span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">'Skeet Staking Monitor'</span>,\n      })\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'success'</span> })\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">'error'</span>, <span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">String</span>(error) })\n    }\n  }\n)\n</code></pre>\n<h2 id=\"-deploying-logic-for-staking-rewards-monitoring\" class=\"font-extrabold tracking-tighter break-word\">📤 Deploying Logic for Staking Rewards Monitoring</h2>\n<p>Similarly, deploy the monitoring app using the <code>skeet deploy</code> command.</p>\n<pre><code class=\"hljs language-bash\">skeet deploy --<span class=\"hljs-keyword\">function</span> skeet:stakeMonitor\n</code></pre>\n<p>You can also specify which functions to deploy by using the <code>--function</code> option.</p>\n<p>Likewise, let's try executing it from Cloud Scheduler.</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/446a191fdf48-20231123.png\" alt=\"\"></p>\n<p>The notification has been successfully received 🎉</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/7ba0331573c5-20231123.png\" alt=\"\"></p>\n<p>In the next chapter, we will manage data more conveniently using <code>Firestore</code> and <code>Google Sheets</code>.</p>","title":"Chapter 3: 🌐💰 The Full Scope of Cloud Utilization: Efficient Monitoring of Solana Validators and Management of Staking Rewards 🚀 | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes","seoData":[{"property":"og:title","content":"Chapter 3: 🌐💰 The Full Scope of Cloud Utilization: Efficient Monitoring of Solana Validators and Management of Staking Rewards 🚀 | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"twitter:title","content":"Chapter 3: 🌐💰 The Full Scope of Cloud Utilization: Efficient Monitoring of Solana Validators and Management of Staking Rewards 🚀 | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"twitter:text:title","content":"Chapter 3: 🌐💰 The Full Scope of Cloud Utilization: Efficient Monitoring of Solana Validators and Management of Staking Rewards 🚀 | solv - An Open-Source Tool for Easily Setting Up and Effortlessly Managing Solana Validators and RPC Nodes"},{"name":"description","content":"In this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud."},{"property":"og:description","content":"In this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud."},{"name":"twitter:description","content":"In this chapter, we explore how to efficiently monitor Solana validators and manage staking rewards by fully leveraging the power of the cloud."},{"property":"og:url","content":"https://solv.epics.dev/en/doc/tutorial/chapter3"},{"property":"og:image","content":"https://solv.epics.dev/ogp.png"},{"property":"og:image:secure","content":"https://solv.epics.dev/ogp.png"},{"name":"twitter:image","content":"https://solv.epics.dev/ogp.png"}],"_nextI18Next":{"initialI18nStore":{"en":{"common":{"contactToTeam":"Talk with Team","privacy":"Privacy","404title":"Page not found","404body":"Sorry, we couldn't find the page you're looking for.","backToTop":"Back to top page","toc":"Table of Contents","openMenu":"Open menu","closeMenu":"Close menu","media":"Media","news":"News","books":"Books","copy":"Copy","copied":"Copied!","solvInstall":"Install solv","updateSettings":"Update settings","setupSolv":"Setup","thatsAll":"That's all!","navs":{"defaultMainNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","dao":"DAO","enterprise":"Enterprise","contact":"Contact"},"commonFooterNav":{"quickstart":"Quickstart","news":"News","doc":"Docs","enterprise":"Enterprise","dao":"DAO","contact":"Contact","privacy":"Privacy","press-kits":"Press Kits"}},"AgreeToPolicy":{"title":"Your Choices Regarding Cookies","body":"We and our third party partners use cookies and similar technologies to process certain information, such as your IP address and digital identifiers, to analyze site usage and provide you better experiences. Please read our privacy policy for the detail.","yes":"Yes, I Accept","no":"No, I Do Not Accept"},"ContactRow":{"discord":{"title":"Community Discord","body":"If you have any inquiries, please create a support ticket in the community Discord.","button":"JOIN"},"form":{"title":"Talk with Team","body":"If you have any inquiries about development and support, please get in touch with us from here.","button":"Go"}},"CTASectionRow":{"title":"The utility tool for Solana Validators","body":"solv is an open-source tool designed to simplify the setup and operation of Solana validators and RPC nodes.","button":"Get Started","demo":"Try Demo"},"WhyOpenSourceDevelopmentRow":{"subtitle":"Why Open-Source Software?","title":"Sustainable technology development and benefits for society as a whole","description":"Open-source software (OSS) development drives technological progress in modern society and enables new value creation.","feature1":{"title":"Value as a public good","description":"Open-source software is free for anyone to use, improve, and redistribute. This makes OSS a public good for all mankind. People all over the world can enjoy its value without feeling financially constrained. As a result, innovation across society will be driven, and the equality and inclusiveness of the digital society will increase."},"feature2":{"title":"Global cooperation","description":"In the world of OSS, developers all over the world work together to improve software beyond the boundaries of regions and organizations. Each person's perspective and expertise can be incorporated into the project, enhancing its quality. OSS is truly a global gathering place of knowledge and experience that consistently produces high-quality software."},"feature3":{"title":"Preventing reinvention of the wheel","description":"OSS allows us to reuse code and prevents us from reinventing the wheel. As a result, developers can focus less on creating everything from scratch and more on solving specific problems and developing new features. This increases efficiency and enables faster higher-quality results."}},"RoadmapRow":{"2022.6":"Epics Lite Paper, TGE (Token Generate Event)","2022.7":"Epics GENESIS presale","2022.8":"Epics White Paper v1","2022.9":"Epics Alpha launch, Solana Summer Camp Hackathon 5th prize","2022.10":"Presale for IDO, WBSO (Advanced R&D) certified by the Dutch government","2022.11":"Solana Breakpoint, GitHub issue Data Oracle Collaborative Development (DIA)","2023.1":"IDO $EPCT on Orca (Solana DEX)","2023.4":"Epics DAO became a Solana Testnet Validator","2023.9":"Seed Extension Round Fundraising","2023.12":"Epics Platform Beta Launch","2024.2":"$EPCT Listed on Meteora (Solana DEX)","2024.4":"NFT Card Design Reveal, NICONICO CHOKAIGI 2024, ENASE 2024","2024.5":"Epics DAO became a Solana mainnet validator","2024.8":"NFT Card Game β Test Begins, WebX 2024","2024.10":"Series A fundraising, EPCD Exchange Launch","2025.4":"Major Release of Epics Platform, General Release of the NFT Card Game","2025.9":"Series B Fundraising","2026.4":"IEO $EPCT"},"OurWorksRow":{"WBSO":{"title":"WBSO accreditation from the Dutch government","description":"Epics DAO has received WBSO (Advanced Science and Technology Research) accreditation from the Dutch government. Epics is a social contribution blockchain game (BCG) that aims to realize a sustainable open-source development environment."},"SolanaValidator":{"title":"We operate a validator for the Solana blockchain","description":"As a validator on the Solana chain, Epics DAO is committed to ensuring the reliability and stability of the network. We will also contribute to the technical aspects of achieving Solana's fast and stable network."},"SolanaSummerCamp":{"title":"Placed 5th at Solana Summer Camp Hackathon 2022","description":"Epics DAO won 5th place out of over 18,000 entries at the Solana Summer Camp Hackathon held July 11-August 16, 2022."},"GoogleWeb3":{"title":"ELSOUL LABO has been certified by Google Web3 Startups program","description":"ELSOUL LABO's activities in the Web3 sector, including Epics DAO, and support for open-source development initiatives such as solv and Skeet, have been recognized and selected for the Google Cloud Web3 Startups program."},"ENASE2024":{"title":"Research Paper on AI & Serverless 'Skeet' Accepted for ENASE 2024","description":"The research paper 'Skeet: Towards a Lightweight Serverless Framework Supporting Modern AI-Driven App Development' has been accepted for presentation at the international conference on software engineering, ENASE 2024."},"CHOKAIGI2024":{"title":"Epics DAO Exhibits at CHOKAIGI 2024","description":"Epics DAO exhibited at CHOKAIGI 2024, held on April 27th - 28th, 2024, distributing limited edition NFTs and more. With a total attendance of 125,362 visitors, the event concluded successfully."},"WebX2024":{"title":"Epics DAO is a WebX 2024 Sponsor","description":"WebX 2024 is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact."}},"SolvTutorialYouTubeRow":{"title":"Complete Guide to Solana Validators","subtitle":"YouTube Tutorial","description":"We have released a comprehensive guide to easily start operating a Solana validator using solv. For those already running a Solana validator, you can easily switch to solv to benefit from no-downtime transitions and accelerated snapshot downloads."},"SolanaBreakpointSideEventRow":{"title":"Solana Validator Hands-On Workshop","description":"Join us to explore the realm of Solana Validators! This beginner-friendly workshop allows you to launch a Solana Validator using Latitude's cloud servers. Validators process transactions and secure the network, earning rewards. You'll get hands-on experience, unraveling the operational essence of validators while enjoying event-exclusive free credits. It's a chance to learn, interact, and dive into the incentivized world of Solana Validators. Looking forward to engaging in discussions. See you there!","link":"Event Detail"},"LatitudeCouponRow":{"subtitle":"Try it now on Bare Metal Cloud","title":"Latitude Trial Credit Coupon","description":"Through our partnership with Latitude, we are now able to offer a $100 credit coupon. By utilizing this coupon, you can actually try out launching a Solana validator with solv at hand right now.","register":"Register Coupon","couponCode":"Coupon Code"},"StakeForOpenSourceRow":{"subtitle":"Stake for the future of Open-Source Development","title":"Let's support Open-Source Development while earning staking rewards.","description":"※ These are not intended for investment advice. The information are based on the situation at the time of writing. Please check for the most current information. Always NFA/DYOR.","feature1":{"title":"Solana Mainnet Validator","description":"Epics DAO operates a Solana mainnet validator with a 0% fee for users who stake their SOL tokens, resulting in a stake reward with an annual percentage rate (APR) of 7.58% as of May 16, 2024. To contribute to the decentralization of the Solana network and enable innovation worldwide, we will focus our operations in areas with fewer nodes and data centers.","button":"Go to Validator Detail"},"feature2":{"title":"Buidlers Collective (BDLC) NFT","description":"When you stake BDLC NFTs on the Epics platform, you can earn $EPCT token rewards. Additionally, an equivalent amount of $EPCT is donated to the open-source project where the NFTs are staked, to be used for future development. This initiative utilizes blockchain technology to enable socially beneficial NFT staking and No Loss Donation, where staking rewards are donated without losing the principal.","button":"Go to NFT Marketplace"}},"NicoNicoChoKaigi2024Row":{"subtitle":"Cho Dice Roll in NICONICO CHOKAIGI 2024","title":"Thank you for visiting!","description":"Epics DAO participated in Nico Nico Chokaigi 2024, held at Makuhari Messe on April 27th and 28th, and distributed limited edition NFTs to visitors. The event attracted a total of 125,362 attendees, with about 3,000 people visiting the Epics DAO Cho Dice Roll booth, successfully concluding the event with great fanfare."},"WebX2024Row":{"title":"WebX 2024 Sponsor Confirmed","description":"Epics DAO will participate as a sponsor at WebX 2024. WebX is the largest event in Asia focused on cutting-edge technologies in Web3, including cryptocurrencies and blockchain. It is the only conference where government bodies, established companies, IP firms, and Web3 businesses can interact.","discountLink":"Sponsor Discount Tickets"}},"doc":{"title":"solv Document","body":"Open-Source Solana Validator Utility Tool","previousPage":"Previous page","nextPage":"Next page","actions":{"motivation":{"title":"Motivation","body":"We believe it to be beneficial for all Solana validators, as well as the Solana community and the open-source development community, and have released it as open-source accordingly."},"quickstart":{"title":"Quickstart","body":"Learn to use solv in three easy steps! This guide quickly introduces you to the essentials of the solv."},"tutorial":{"title":"Tutorial","body":"A guide to actually starting the operation of a Solana validator using solv."},"update":{"title":"No Downtime Update","body":"Explains how to migrate validator nodes without downtime. It's effective for daily updates as well as moving operations."}},"menuNav":{"home":"Docs Home","general":{"groupTitle":"General","motivation":"Motivation","quickstart":"Quickstart"},"quickstart":{"groupTitle":"Quickstart","start-solv":"Start solv","solv-mev-mode":"solv MEV Mode","no-downtime-update":"No Downtime Update"},"tutorial":{"groupTitle":"Tutorial","chapter1":"1. Solana Setup","chapter2":"2. Backup & Migrate","chapter3":"3. Cloud & Monitor","chapter4":"4. Revenue Analysis","chapter5":"5. Setup RPC Node"}},"headerNav":{"home":"solv Home","news":"News"}}}},"initialLocale":"en","ns":["common","doc"],"userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ja"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ja"]}}}}},"__N_SSG":true}